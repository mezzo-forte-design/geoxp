/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["GeoXp"] = factory();
	else
		root["GeoXp"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/AudioManager.js":
/*!*****************************!*\
  !*** ./src/AudioManager.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ AudioManager\n/* harmony export */ });\n/* harmony import */ var howler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! howler */ \"./node_modules/howler/dist/howler.js\");\n/* harmony import */ var howler__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(howler__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm5/internal/Subject.js\");\n/* harmony import */ var _utils_Device_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/Device.js */ \"./src/utils/Device.js\");\n/* harmony import */ var _utils_helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/helpers.js */ \"./src/utils/helpers.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"./src/constants.js\");\n/* harmony import */ var _audio_silence_mp3__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./audio/silence.mp3 */ \"./src/audio/silence.mp3\");\n/* harmony import */ var _audio_test_mp3__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./audio/test.mp3 */ \"./src/audio/test.mp3\");\n/* harmony import */ var _audio_visited_mp3__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./audio/visited.mp3 */ \"./src/audio/visited.mp3\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/** @module AudioManager */\n\n\n\n\n // default audio\n\n\n\n // Howler configuration\n\nvar USE_WEBAUDIO = _utils_Device_js__WEBPACK_IMPORTED_MODULE_1__.default.isSafariiOS() && _utils_Device_js__WEBPACK_IMPORTED_MODULE_1__.default.webaudio();\nhowler__WEBPACK_IMPORTED_MODULE_0__.Howler.usingWebAudio = USE_WEBAUDIO;\nhowler__WEBPACK_IMPORTED_MODULE_0__.Howler.autoUnlock = true;\n/**\r\n * Creates AudioManager class.\r\n * AudioManager is responsible for all audio media management\r\n * @param { Object } config - Audio config options\r\n * @returns { Object } Audio manager instance\r\n * @constructor\r\n */\n\nvar AudioManager = /*#__PURE__*/function () {\n  function AudioManager(config) {\n    _classCallCheck(this, AudioManager);\n\n    /**\r\n    config: {\r\n      sounds: [{\r\n        id,\r\n        label,\r\n        url,\r\n      }],\r\n      options: {\r\n        test,\r\n        silence,\r\n        visited,\r\n        fadeInTime,\r\n        fadeOutTime\r\n      }\r\n    }\r\n    */\n    this.play$ = new rxjs__WEBPACK_IMPORTED_MODULE_7__.Subject();\n    this.done$ = new rxjs__WEBPACK_IMPORTED_MODULE_7__.Subject();\n\n    this._init(config);\n  }\n  /**\r\n  * Inits AudioManager on provided options\r\n  * @param { Object } config - Audio config options\r\n  */\n\n\n  _createClass(AudioManager, [{\n    key: \"_init\",\n    value: function _init(config) {\n      // sets default if none provided\n      if (!config.options) {\n        console.info('*** [AudioManager] *** System sounds URLs not provided -> Using default sounds. You can find example audio files in /src/audio folder ***');\n        config.options = {\n          test: _audio_test_mp3__WEBPACK_IMPORTED_MODULE_5__.default,\n          silence: _audio_silence_mp3__WEBPACK_IMPORTED_MODULE_4__.default,\n          visited: _audio_visited_mp3__WEBPACK_IMPORTED_MODULE_6__.default,\n          fadeInTime: _constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_FADE_IN_TIME,\n          fadeOutTime: _constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_FADE_OUT_TIME\n        };\n      } else {\n        if (!config.options.test) {\n          console.info('*** [AudioManager] *** Test sound URL not provided -> Using default sound ***');\n          config.options.test = _audio_test_mp3__WEBPACK_IMPORTED_MODULE_5__.default;\n        }\n\n        if (!config.options.visited) {\n          console.info('*** [AudioManager] *** Visited spot sound URL not provided -> Using default sound ***');\n          config.options.visited = _audio_visited_mp3__WEBPACK_IMPORTED_MODULE_6__.default;\n        }\n\n        config.options.silence = config.options.silence || _audio_silence_mp3__WEBPACK_IMPORTED_MODULE_4__.default;\n        config.options.fadeInTime = (0,_utils_helpers_js__WEBPACK_IMPORTED_MODULE_2__.isPositiveNumber)(config.options.fadeInTime) ? config.options.fadeInTime : _constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_FADE_IN_TIME;\n        config.options.fadeOutTime = (0,_utils_helpers_js__WEBPACK_IMPORTED_MODULE_2__.isPositiveNumber)(config.options.fadeOutTime) ? config.options.fadeOutTime : _constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_FADE_OUT_TIME;\n      } // sets config\n\n\n      this._config = config; // init variables\n\n      this.playing = [];\n\n      if (this._buffer) {\n        this._buffer.clear();\n      }\n\n      this._buffer = new Map();\n    }\n    /**\r\n    * Resets AudioManager to provided options\r\n    * @param { Object } config - Audio config options\r\n    */\n\n  }, {\n    key: \"reload\",\n    value: function reload(config) {\n      this.unload();\n\n      this._init(config);\n    }\n    /**\r\n    * Clears the sound buffer\r\n    */\n\n  }, {\n    key: \"unload\",\n    value: function unload() {\n      this._buffer.clear();\n\n      howler__WEBPACK_IMPORTED_MODULE_0__.Howler.stop();\n      howler__WEBPACK_IMPORTED_MODULE_0__.Howler.unload();\n    }\n    /**\r\n    * Plays test system sound\r\n    */\n\n  }, {\n    key: \"test\",\n    value: function test() {\n      this._playSystemSound(this._config.options.test);\n    }\n    /**\r\n    * Plays silence\r\n    */\n\n  }, {\n    key: \"silence\",\n    value: function silence() {\n      this._playSystemSound(this._config.options.silence);\n    }\n    /**\r\n    * Unlocks web audio\r\n    */\n\n  }, {\n    key: \"unlock\",\n    value: function unlock() {\n      this._playSystemSound(this._config.options.silence);\n    }\n    /**\r\n    * Plays already visited system sound\r\n    */\n\n  }, {\n    key: \"visited\",\n    value: function visited() {\n      this._playSystemSound(this._config.options.visited);\n    }\n    /**\r\n    * Loads Howler sounds in buffer\r\n    * @param { Object } spot - spot to load\r\n    * @param { boolean } overlap - can overlap other sounds\r\n    * @param { number } [fade = null] - fade in time [ms]\r\n    * @param { boolean } [playWhenReady = false] - play sound when loaded\r\n    */\n\n  }, {\n    key: \"load\",\n    value: function load(spot) {\n      var _this = this;\n\n      var overlap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var fade = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var playWhenReady = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (!spot.audio) {\n        console.error('[AudioManager.load] - audio info not provided. Cannot load');\n        return;\n      }\n\n      var audio = this._config.sounds.find(function (e) {\n        return e.id === spot.audio;\n      });\n\n      if (!audio) {\n        console.error('[AudioManager.load] - sound not found. Cannot load');\n        return;\n      } // sets id to spot id + audio id\n\n\n      var id = \"\".concat(spot.id, \"-\").concat(audio.id); // New\n\n      var sound = {\n        id: id,\n        spot: spot,\n        overlap: overlap,\n        playWhenReady: playWhenReady,\n        audio: new howler__WEBPACK_IMPORTED_MODULE_0__.Howl({\n          src: [audio.url],\n          html5: !USE_WEBAUDIO\n        })\n      }; // save reference to sound (url act as unique ID)\n\n      this._buffer.set(id, sound);\n\n      sound.audio.once('load', function () {\n        //TODO end, stop, differences?\n        sound.audio.on('end', function () {\n          _this._destroy(id);\n\n          _this.done$.next(sound);\n        });\n        sound.audio.on('stop', function () {\n          _this._destroy(id);\n\n          _this.done$.next(sound);\n        });\n        sound.audio.on('play', function () {\n          // When starting playback notify\n          _this.play$.next(sound);\n        }); // start sound\n\n        if (sound.playWhenReady) {\n          var fadeTime = fade ? fade : _this._config.options.fadeInTime;\n\n          _this.play(spot, overlap, fadeTime);\n        }\n      });\n    }\n    /**\r\n    * Plays Howler sounds if loaded, else load() then play().\r\n    * @param { Object } spot - spot to load\r\n    * @param { boolean } overlap - can overlap other sounds\r\n    * @param { number } [fade = null] - fade in time [ms]\r\n    * @param { number } [volume = 1] - playback volume from 0 to 1\r\n    */\n\n  }, {\n    key: \"play\",\n    value: function play(spot) {\n      var overlap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var fade = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var volume = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n      if (!spot.audio) {\n        console.error('[AudioManager.play] - audio info non provided. Cannot play');\n        return;\n      } // sets id to spot audio\n\n\n      var id = \"\".concat(spot.id, \"-\").concat(spot.audio); // if audio isn't queued and loaded load()\n\n      var sound = this._buffer.get(id);\n\n      if (!sound) {\n        // load audio and play when ready\n        this.load(spot, overlap, fade, true);\n      } else {\n        // if sounds are ready play(), else playWhenReady\n        if (sound.audio.state() === 'loaded') {\n          if (!sound.audio.playing()) {\n            // play sound\n            sound.audio.play(); // fade in\n\n            var fadeTime = fade ? fade : this._config.options.fadeInTime;\n            if (fadeTime > 0) sound.audio.fade(0, volume, fadeTime);else sound.audio.volume(volume);\n          }\n        } else sound.playWhenReady = true;\n      }\n    }\n    /**\r\n    * Stops specific spot sound\r\n    * @param { Object } spot - spot to load\r\n    * @param { number } [fade = null] - fade out time [ms]\r\n    */\n\n  }, {\n    key: \"stop\",\n    value: function stop(spot) {\n      var fade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (!spot.audio) {\n        console.error('[AudioManager.stop] - audio info non provided. Cannot stop');\n        return;\n      } // sets id to spot audio\n\n\n      var id = \"\".concat(spot.id, \"-\").concat(spot.audio); // finds audio in buffer\n\n      var sound = this._buffer.get(id);\n\n      if (sound) {\n        if (sound.audio.playing()) {\n          // fade out then stop\n          var fadeTime = fade ? fade : this._config.options.fadeOutTime;\n\n          if (fadeTime > 0) {\n            sound.audio.fade(sound.audio.volume(), 0, fadeTime);\n            sound.audio.once('fade', function () {\n              sound.audio.stop();\n            });\n          } else sound.audio.stop();\n        } else this._destroy(id);\n      }\n    }\n    /**\r\n    * Checks if any sound is playing\r\n    * @param { boolean } [overlap = false] - if true, excludes overlapping audios\r\n    * @returns { boolean } Sound is playing\r\n    * */\n\n  }, {\n    key: \"hasAudioPlaying\",\n    value: function hasAudioPlaying() {\n      var overlap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var atLeastOne = false;\n\n      this._buffer.forEach(function (sound) {\n        // if playing\n        if (sound.audio.playing() && (!sound.overlap || !overlap)) {\n          atLeastOne = true;\n        }\n      });\n\n      return atLeastOne;\n    }\n    /**\r\n    * Sets the volume for all audios\r\n    * @param { number } volume - Set volume 0 to 1\r\n    */\n\n  }, {\n    key: \"setVolume\",\n    value: function setVolume(volume) {\n      howler__WEBPACK_IMPORTED_MODULE_0__.Howler.volume = volume;\n    }\n    /**\r\n    * Stops all sounds imediately\r\n    */\n\n  }, {\n    key: \"stopAll\",\n    value: function stopAll() {\n      howler__WEBPACK_IMPORTED_MODULE_0__.Howler.stop();\n    }\n    /**\r\n    * Mutes all sounds\r\n    * @param { boolean } muted - Mute or unmute\r\n    */\n\n  }, {\n    key: \"muteAll\",\n    value: function muteAll(muted) {\n      howler__WEBPACK_IMPORTED_MODULE_0__.Howler.mute(muted);\n    }\n    /**\r\n    * Destroys specific sound\r\n    * @param {string} id - id of sound to destroy\r\n    */\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy(id) {\n      var sound = this._buffer.get(id);\n\n      if (sound) {\n        sound.audio.unload();\n\n        this._buffer[\"delete\"](id);\n      }\n    }\n    /**\r\n    * Plays system sound\r\n    * @param { string } url - url of sound to play\r\n    */\n\n  }, {\n    key: \"_playSystemSound\",\n    value: function _playSystemSound(url) {\n      var _this2 = this;\n\n      if (!this._systemSoundPlaying) {\n        this._systemSoundPlaying = true;\n\n        this._buffer.forEach(function (e) {\n          if (e) e.audio.volume(.2);\n        });\n\n        var sound = new howler__WEBPACK_IMPORTED_MODULE_0__.Howl({\n          src: [url],\n          format: 'mp3',\n          html5: !USE_WEBAUDIO,\n          autoplay: true\n        });\n        sound.on('end', function () {\n          _this2._systemSoundPlaying = false;\n\n          _this2._buffer.forEach(function (e) {\n            if (e) e.audio.volume(1);\n          });\n        });\n      }\n    }\n  }]);\n\n  return AudioManager;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/AudioManager.js\n");

/***/ }),

/***/ "./src/ExperienceManager.js":
/*!**********************************!*\
  !*** ./src/ExperienceManager.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ ExperienceManager\n/* harmony export */ });\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm5/internal/Subject.js\");\n/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/helpers */ \"./src/utils/helpers.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./src/constants.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/** @module ExperienceManager */\n\n\n\n/**\r\n * Creates ExperienceManager class.\r\n * ExperienceManager provides rules for geolocalized audio playback\r\n * @param { Object } config - Experience config options\r\n * @returns { Object } ExperienceManager instance\r\n * @constructor\r\n */\n\nvar ExperienceManager = /*#__PURE__*/function () {\n  function ExperienceManager(config) {\n    _classCallCheck(this, ExperienceManager);\n\n    /**\r\n    config: {\r\n      patterns: [{\r\n        label\r\n        disabled\r\n        replay\r\n        overlap\r\n        spots: [{\r\n            id\r\n            position\r\n            audio\r\n            after\r\n            notAfter\r\n        }]\r\n      }],\r\n      options: {\r\n        visitedFilter [ms]\r\n        cookies: {\r\n          deleteOnLastSpot\r\n          deleteOnCompletion\r\n          expiration [min]\r\n        }\r\n      }\r\n    }\r\n    */\n    // creates subjects for notification\n    this.spotIncoming$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();\n    this.spotActive$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();\n    this.spotVisited$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();\n    this.spotOutgoing$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject();\n    this.geoRefresh$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Subject(); // creates patterns\n\n    this._patterns = new Map(); // inits the instance based on config\n\n    this._init(config);\n  }\n  /**\r\n  * Inits ExperienceManager on provided options\r\n  * @param { Object } config - Experience config options\r\n  */\n\n\n  _createClass(ExperienceManager, [{\n    key: \"_init\",\n    value: function _init(config) {\n      // check options\n      if (!config.options) {\n        config.options = {\n          visitedFilter: _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_VISITED_FILTER_TIME,\n          cookies: null\n        };\n      } else {\n        config.options.visitedFilter = (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_0__.isNumber)(config.options.visitedFilter) ? config.options.visitedFilter : _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_VISITED_FILTER_TIME; // check cookies\n\n        if (config.options.cookies && !config.options.cookies.deleteOnLastSpot && !config.options.cookies.deleteOnCompletion) {\n          // defaults to deleteOnCompletion\n          config.options.cookies = {\n            deleteOnCompletion: true\n          };\n        }\n      } // inits force spot\n\n\n      this.forced = null; // sets config\n\n      this._config = config; // reloads patterns\n\n      this._loadPatterns(true);\n    }\n    /**\r\n    * Builds all enabled patterns\r\n    * @param { boolean } [restart = false] - inits pattern spot memories\r\n    */\n\n  }, {\n    key: \"_loadPatterns\",\n    value: function _loadPatterns() {\n      var _this = this;\n\n      var restart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      // clears all\n      if (this._patterns && restart) {\n        this._patterns.clear();\n      } // builds all enabled patterns\n\n\n      this._config.patterns.forEach(function (cfg) {\n        var pattern = _this._patterns.get(cfg.id);\n\n        if (pattern) {\n          // pattern alredy exists, change cfg info\n          pattern.cfg = cfg;\n        } else {\n          // checks for cookies\n          var visited = [];\n          var cName = \"\".concat(_constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PATTERN_COOKIE_PREFIX, \"-\").concat(cfg.id);\n\n          if (_this._config.options.cookies) {\n            // cookies enabled, reload visited spots\n            var cookie = (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_0__.getCookie)(cName);\n            if (cookie) visited = JSON.parse(cookie);\n          } else {\n            // cookies disabled, delete cookies if present\n            (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_0__.deleteCookie)(cName);\n          } // new pattern, add to map\n\n\n          var toAdd = {\n            cfg: cfg,\n            visited: visited,\n            inside: [],\n            active: []\n          };\n\n          _this._patterns.set(cfg.id, toAdd);\n        }\n      });\n    }\n    /**\r\n    * Loads a new config\r\n    * @param { Object } config - Experience config options\r\n    */\n\n  }, {\n    key: \"reload\",\n    value: function reload(config) {\n      this._init(config);\n\n      console.log('config', config);\n    }\n    /**\r\n    * Unloads all object memories and subscriptions\r\n    */\n\n  }, {\n    key: \"unload\",\n    value: function unload() {\n      this.clearCookies();\n    }\n    /**\r\n    * Clears pattern cookies, if no pattern specified, clears all\r\n    * @param { string } id - id of pattern to clear\r\n    */\n\n  }, {\n    key: \"clearCookies\",\n    value: function clearCookies(id) {\n      if (id) {\n        var pattern = this._config.patterns.find(function (e) {\n          return e.id === id;\n        });\n\n        if (pattern) {\n          // delete cookies if present\n          var cName = \"\".concat(_constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PATTERN_COOKIE_PREFIX, \"-\").concat(pattern.id);\n          (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_0__.deleteCookie)(cName);\n        }\n      } else {\n        this._config.patterns.forEach(function (cfg) {\n          // delete cookies if present\n          var cName = \"\".concat(_constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PATTERN_COOKIE_PREFIX, \"-\").concat(cfg.id);\n          (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_0__.deleteCookie)(cName);\n        });\n      }\n    }\n    /**\r\n    * Enables specific pattern\r\n    * @param { string } id - pattern id to enable\r\n    */\n\n  }, {\n    key: \"enablePattern\",\n    value: function enablePattern(id) {\n      // finds pattern in map\n      var pattern = this._patterns.get(id);\n\n      if (pattern) {\n        // pattern enabled\n        pattern.cfg.disabled = false; // calls for geo refresh\n\n        this.geoRefresh$.next();\n      } else {\n        console.error('[GeoManager.enablePattern] - Pattern id not found, cannot enable');\n        return;\n      }\n    }\n    /**\r\n    * Disables specific pattern\r\n    * @param { string } id - pattern id to disable\r\n    */\n\n  }, {\n    key: \"disablePattern\",\n    value: function disablePattern(id) {\n      // finds pattern in map\n      var pattern = this._patterns.get(id);\n\n      if (pattern) {\n        // pattern disabled\n        pattern.cfg.disabled = true;\n      } else {\n        console.error('[GeoManager.disablePattern] - Pattern id not found, cannot disable');\n        return;\n      } // reloads patterns\n\n\n      this._loadPatterns();\n    }\n    /**\r\n    * New incoming position, prefetch audio\r\n    * @param { string } position - incoming position id\r\n    */\n\n  }, {\n    key: \"incoming\",\n    value: function incoming(position) {\n      var _this2 = this;\n\n      // for each pattern\n      this._patterns.forEach(function (pattern) {\n        // checks if pattern enabled\n        if (!pattern.cfg.disabled) {\n          // checks if position is on pattern, then load if needed\n          var spots = pattern.cfg.spots.filter(function (e) {\n            return e.position === position;\n          });\n          spots.forEach(function (spot) {\n            // preload spot\n            _this2.spotIncoming$.next(spot);\n          });\n        }\n      });\n    }\n    /**\r\n    * New inside position, play audio if needed\r\n    * @param { string } position - inside positon id\r\n    */\n\n  }, {\n    key: \"inside\",\n    value: function inside(position) {\n      var _this3 = this;\n\n      // for each pattern\n      this._patterns.forEach(function (pattern) {\n        // checks if pattern enabled\n        if (!pattern.cfg.disabled) {\n          // checks if position is on pattern, then play if needed\n          var spots = pattern.cfg.spots.filter(function (e) {\n            return e.position === position;\n          }); // evaluates each spot to check if something's to play\n\n          spots.forEach(function (spot) {\n            // for each spot linked to position\n            // first time\n            if (pattern.cfg.replay || !pattern.visited.includes(spot.id)) {\n              // spot order ok\n              if ((!spot.after || pattern.visited.includes(spot.after)) && (!spot.notAfter || !pattern.visited.includes(spot.notAfter))) {\n                // overlap ok\n                if (pattern.cfg.overlap || pattern.active.length == 0) {\n                  if (!pattern.active.includes(spot.id)) {\n                    pattern.active.push(spot.id);\n                  }\n\n                  var info = {\n                    spot: spot,\n                    overlap: pattern.cfg.overlap\n                  }; // play audio\n\n                  _this3.spotActive$.next(info);\n                }\n              }\n            }\n          }); // reevaluates each spot to check if visited\n\n          spots.forEach(function (spot) {\n            if (!pattern.cfg.replay && pattern.visited.includes(spot.id)) {\n              // just when spot is first inside\n              if (!pattern.inside.includes(spot.id)) {\n                // waits to see if somthing goes active\n                setTimeout(function () {\n                  // still inside and nothing active\n                  if (pattern.inside.includes(spot.id) && pattern.active.length == 0) {\n                    _this3.spotVisited$.next(spot);\n                  }\n                }, _this3._config.options.visitedFilter);\n              }\n            }\n          }); // reevaluates each spot to check when first inside\n\n          spots.forEach(function (spot) {\n            // inside spot\n            if (!pattern.inside.includes(spot.id)) {\n              pattern.inside.push(spot.id);\n            }\n          });\n        }\n      });\n    }\n    /**\r\n    * New outgoing position, stops audio\r\n    * @param { string } position - outgoing position\r\n    */\n\n  }, {\n    key: \"outgoing\",\n    value: function outgoing(position) {\n      var _this4 = this;\n\n      // for each enabled pattern\n      this._patterns.forEach(function (pattern) {\n        // spot outgoing, stops audio\n        var spots = pattern.cfg.spots.filter(function (e) {\n          return e.position === position;\n        });\n        spots.forEach(function (spot) {\n          if (pattern.inside.includes(spot.id)) {\n            // if spot is inside, remove\n            pattern.inside = pattern.inside.filter(function (e) {\n              return e !== spot.id;\n            });\n          }\n\n          if (pattern.active.includes(spot.id)) {\n            // if spot is active, stop audio and remove\n            pattern.active = pattern.active.filter(function (e) {\n              return e !== spot.id;\n            });\n\n            _this4.spotOutgoing$.next(spot);\n          }\n        });\n      });\n    }\n    /**\r\n    * Spot is playing, make it visited\r\n    * @param { Object } spot - spot playing\r\n    */\n\n  }, {\n    key: \"playing\",\n    value: function playing(spot) {\n      var _this5 = this;\n\n      if (!spot) {\n        console.error('[ExperienceManager.playing] - spot missing');\n      } // marks spot visited\n\n\n      this._patterns.forEach(function (pattern) {\n        var _spot = pattern.cfg.spots.find(function (e) {\n          return e.id === spot.id;\n        });\n\n        if (_spot) {\n          // mark spot active (if isn't already)\n          if (!pattern.active.includes(_spot.id)) {\n            pattern.active.push(_spot.id);\n          } // mark spot visited\n\n\n          if (!pattern.visited.includes(_spot.id)) {\n            pattern.visited.push(_spot.id);\n          } // cookies management\n\n\n          if (_this5._config.options.cookies) {\n            var cName = \"\".concat(_constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PATTERN_COOKIE_PREFIX, \"-\").concat(pattern.cfg.id); // updates pattern visited spots cookie\n\n            (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_0__.setCookie)(cName, JSON.stringify(pattern.visited), _this5._config.options.cookies.expiration || _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_PATTERN_COOKIE_EXPIRATION); // eventual cookies deletion\n\n            if (!_this5._config.options.cookies.deleteOnCompletion) {\n              // deletes cookies on last spot\n              if (_this5._config.options.cookies.deleteOnLastSpot && _spot.last) (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_0__.deleteCookie)(cName);\n            } else {\n              // deletes cookies on pattern completion\n              if (pattern.cfg.spots.filter(function (e) {\n                return !pattern.visited.includes(e.id);\n              }).length <= 0) (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_0__.deleteCookie)(cName);\n            }\n          }\n        }\n      });\n    }\n    /**\r\n    * Spot ended (either stopped or finished), remove from active, refresh all inside positions\r\n    * @param { Object } - spot ended\r\n    */\n\n  }, {\n    key: \"end\",\n    value: function end(spot) {\n      var _this6 = this;\n\n      if (!spot) {\n        console.error('[ExperienceManager.end] - spot missing');\n      }\n\n      var removeForce = false; // removes from active all spots linked to the audio\n\n      this._patterns.forEach(function (pattern) {\n        var _spot = pattern.cfg.spots.find(function (e) {\n          return e.id === spot.id;\n        });\n\n        if (_spot) {\n          // remove from active\n          pattern.active = pattern.active.filter(function (e) {\n            return e !== _spot.id;\n          }); // if matches forced spot, remove force\n\n          if (_spot.id === _this6.forced) {\n            _this6.forced = null;\n            removeForce = true;\n          }\n        }\n      }); // request for positions refresh\n      // this is meant for spots concurrency order management\n\n\n      if (!removeForce) {\n        this.geoRefresh$.next();\n      } // returns removeForce\n\n\n      return removeForce;\n    }\n    /**\r\n    * Checks to see if there's any active spots\r\n    * @returns { boolean } Some spots are active\r\n    */\n\n  }, {\n    key: \"hasActiveSpots\",\n    value: function hasActiveSpots() {\n      var someActive = false;\n\n      this._patterns.forEach(function (pattern) {\n        if (pattern.active.length > 0) {\n          someActive = true;\n        }\n      });\n\n      return someActive;\n    }\n    /**\r\n    * Gets visited spots for a given pattern\r\n    * @param { string } id - pattern id\r\n    * @returns { string[] } array of visited spots\r\n    */\n\n  }, {\n    key: \"getVisitedSpots\",\n    value: function getVisitedSpots(id) {\n      var pattern = this._patterns.get(id);\n\n      if (!pattern) {\n        console.error('[GeoXp.ExperienceManager.getVisitedSpots] - Pattern not found!');\n        return;\n      }\n\n      return pattern.visited;\n    }\n    /**\r\n    * Gets spot by id\r\n    * @param { string } id - id of spot to find\r\n    * @returns { object|null } spot found or null\r\n    */\n\n  }, {\n    key: \"getSpot\",\n    value: function getSpot(id) {\n      var spot = null;\n\n      this._patterns.forEach(function (pattern) {\n        var found = pattern.cfg.spots.find(function (e) {\n          return e.id.toUpperCase() === id.toUpperCase();\n        });\n\n        if (found) {\n          spot = found;\n        }\n      });\n\n      return spot;\n    }\n    /**\r\n    * Marks spots as unvisited.\r\n    * If no spot id provided, marks all inside spots as unvisited\r\n    * @param { string } [id = null] - id of spot to unvisit\r\n    */\n\n  }, {\n    key: \"replaySpot\",\n    value: function replaySpot() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      this._patterns.forEach(function (pattern) {\n        if (id) {\n          // mark specific spot as unvisited\n          if (pattern.visited.includes(id)) {\n            pattern.visited = pattern.visited.filter(function (e) {\n              return e !== spot.id;\n            });\n          }\n        } else {\n          // remove all inside if not active from visited\n          pattern.visited = pattern.visited.filter(function (e) {\n            return !pattern.inside.includes(e) || pattern.active.includes(e);\n          });\n        }\n      }); // request for positions refresh\n\n\n      this.geoRefresh$.next();\n    }\n    /**\r\n    * Forces spot activation\r\n    * Forces other spots deactivation unless overlapping\r\n    * @param { string } id - id of spot to force\r\n    * */\n\n  }, {\n    key: \"forceSpot\",\n    value: function forceSpot(id) {\n      var _this7 = this;\n\n      if (!id) {\n        console.error('[ExperienceManager.forceSpot] - spot id not provided, cannot activate');\n        return;\n      }\n\n      this._patterns.forEach(function (pattern) {\n        // checks if spot actually exist in pattern\n        var spot = pattern.cfg.spots.find(function (e) {\n          return e.id === id;\n        });\n\n        if (spot) {\n          // checks if pattern enabled\n          if (pattern.cfg.disabled) {\n            console.error('[ExperienceManager.forceSpot] - pattern is disabled, cannot force');\n            return;\n          } // if there are spots active\n\n\n          if (pattern.active.length > 0) {\n            // for each active spot\n            pattern.active.forEach(function (active) {\n              var toDeactivate = pattern.cfg.spots.find(function (e) {\n                return e.id === active;\n              }); // removes from active spots\n\n              pattern.active = pattern.active.filter(function (e) {\n                return e.id !== toDeactivate.id;\n              }); // deactivates spot by outgoing it\n\n              _this7.spotOutgoing$.next(toDeactivate);\n            });\n          } // adds to active spots\n\n\n          if (!pattern.active.includes(spot.id)) {\n            pattern.active.push(spot.id);\n          } // activates required spot\n\n\n          var info = {\n            spot: spot,\n            overlap: pattern.overlap\n          };\n\n          _this7.spotActive$.next(info); // sets spot forced\n\n\n          _this7.forced = spot.id;\n        }\n      });\n    }\n  }]);\n\n  return ExperienceManager;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ExperienceManager.js\n");

/***/ }),

/***/ "./src/GeoManager.js":
/*!***************************!*\
  !*** ./src/GeoManager.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ GeoManager\n/* harmony export */ });\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm5/internal/Subject.js\");\n/* harmony import */ var _utils_Device__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/Device */ \"./src/utils/Device.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./src/constants.js\");\n/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/helpers */ \"./src/utils/helpers.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/** @module GeoManager */\n\n\n\n\n/** Converts numeric degrees to radians */\n\nif (typeof Number.prototype.toRad === \"undefined\") {\n  Number.prototype.toRad = function () {\n    return this * Math.PI / 180;\n  };\n}\n/**\r\n * Creates GeoManager class.\r\n * GeoManager is responsible for geoLocalization\r\n * @param config - Geo config options\r\n * @returns { Object } GeoManager instance\r\n * @constructor\r\n */\n\n\nvar GeoManager = /*#__PURE__*/function () {\n  function GeoManager(config) {\n    _classCallCheck(this, GeoManager);\n\n    /**\r\n    config: {\r\n      positions: [{\r\n        id,\r\n        label,\r\n        lat,\r\n        lon,\r\n        radius,    [m]\r\n        deadband,  [m]\r\n        fetch     1 : n ratio of radius for prefetching\r\n      }],\r\n      options: {\r\n        accuracy,\r\n        defaultRadius,\r\n        defaultDeadband,\r\n        defaultFetch\r\n      }\r\n    }\r\n    */\n    // bind listeners\n    this._geoSuccess = this._geoSuccess.bind(this);\n    this._geoError = this._geoError.bind(this); // creates subjects for notification\n\n    this.inside$ = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();\n    this.incoming$ = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();\n    this.outgoing$ = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject();\n    this.position$ = new rxjs__WEBPACK_IMPORTED_MODULE_3__.Subject(); // inits the instance based on config\n\n    this._init(config);\n  }\n  /**\r\n  * Inits AudioManager on provided options\r\n  * @param config - Geo config options\r\n  */\n\n\n  _createClass(GeoManager, [{\n    key: \"_init\",\n    value: function _init(config) {\n      this._geolocationApiConfig = {\n        enableHighAccuracy: config.options.enableHighAccuracy || true,\n        maximumAge: config.options.maximumAge || 30000,\n        timeout: config.options.timeout || 27000\n      }; // sets default is nothing provided\n\n      if (!config.options) {\n        config.options = {\n          accuracy: _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_ACCURACY,\n          defaultDeadband: _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_DEADBAND,\n          defaultRadius: _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_RADIUS,\n          defaultFetch: _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_FETCH\n        };\n      } else {\n        // check if some of the single options are missing\n        config.options.accuracy = (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_2__.isNumber)(config.options.accuracy) ? config.options.accuracy : _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_ACCURACY;\n        config.options.defaultDeadband = (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_2__.isNumber)(config.options.defaultDeadband) ? config.options.defaultDeadband : _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_DEADBAND;\n        config.options.defaultRadius = (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_2__.isNumber)(config.options.defaultRadius) ? config.options.defaultRadius : _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_RADIUS;\n        config.options.defaultFetch = (0,_utils_helpers__WEBPACK_IMPORTED_MODULE_2__.isNumber)(config.options.defaultFetch) && config.options.defaultFetch >= 1 ? config.options.defaultFetch : _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_FETCH;\n      } // sets minimum manual mode precision\n\n\n      this.FORCE_ACCURACY = _constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_FORCE_ACCURACY; // sets config\n\n      this._config = config; // init variables\n\n      this.inside = [];\n      this.position; // Listens for GPS position\n\n      if (this._GEO_WATCH) {\n        navigator.geolocation.clearWatch(this._GEO_WATCH);\n      }\n\n      this._GEO_WATCH = navigator.geolocation.watchPosition(this._geoSuccess, this._geoError, this._geolocationApiConfig);\n    }\n    /**\r\n    * Loads a new configuration\r\n    * @param config - Geo config options\r\n    */\n\n  }, {\n    key: \"reload\",\n    value: function reload(config) {\n      this._init(config);\n    }\n    /**\r\n    * Unloads all object subscriptions\r\n    */\n\n  }, {\n    key: \"unload\",\n    value: function unload() {\n      this.inside = [];\n\n      if (this._GEO_WATCH) {\n        navigator.geolocation.clearWatch(this._GEO_WATCH);\n      }\n    }\n    /**\r\n    * Unlocks geolocation API\r\n    */\n\n  }, {\n    key: \"unlock\",\n    value: function unlock() {\n      // request for position\n      navigator.geolocation.getCurrentPosition(function () {});\n    }\n    /**\r\n    * Sends new notification for each inside position\r\n    */\n\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      var _this = this;\n\n      this.inside.forEach(function (positionId) {\n        var position = _this._config.positions.find(function (e) {\n          return e.id === positionId;\n        });\n\n        _this.inside$.next(position.id);\n      });\n    }\n    /**\r\n    * Enables / disables internal geolocation updates\r\n    * @param { boolean } enabled - enable or disable\r\n    */\n\n  }, {\n    key: \"internalGeolocation\",\n    value: function internalGeolocation(enabled) {\n      if (enabled) {\n        this._GEO_WATCH = navigator.geolocation.watchPosition(this._geoSuccess, this._geoError, this._geolocationApiConfig);\n      } else if (this._GEO_WATCH) {\n        navigator.geolocation.clearWatch(this._GEO_WATCH);\n      }\n    }\n    /**\r\n    * Checks if manual mode is available\r\n    * Rules are\r\n    * Your gps accuracy is really bad\r\n    * You are not too far away\r\n    * @param { string } id - id for position of spot to force\r\n    * @returns { boolean } Manual mode is available\r\n    * */\n\n  }, {\n    key: \"canForceSpot\",\n    value: function canForceSpot(id) {\n      var position = this._config.positions.find(function (e) {\n        return e.id === id;\n      });\n\n      if (position) {\n        var accuracy = this.lastPosition.coords.accuracy;\n\n        var distance = this._calcGeoDistance(this.lastPosition.coords.longitude, this.lastPosition.coords.latitude, position.lon, position.lat);\n\n        var spotArea = (position.radius || this._config.options.defaultRadius) + (position.deadband || this._config.options.defaultDeadband); // checks for max allowed distance\n\n        if (distance - accuracy > spotArea) {\n          console.warn('[GeoManager.canForceSpot] - Cannot force spot, too far');\n          return false;\n        }\n\n        if (accuracy > this.FORCE_ACCURACY) {\n          // canForce, poor accuracy\n          return true;\n        } else {\n          if (distance < spotArea) {\n            // can force, near the spot\n            return true;\n          }\n\n          console.warn('[GeoManager.canForceSpot] - Cannot force spot, current position is too accurate');\n          return false;\n        }\n      } else {\n        console.error('[GeoManager.canForceSpot] - position id not found');\n      }\n\n      return false;\n    }\n    /**\r\n    * Checks the status of the spots in relation to current position\r\n    * @param { Object } pos - current position as provided by geolocation API\r\n    */\n\n  }, {\n    key: \"_geoSuccess\",\n    value: function _geoSuccess(pos) {\n      var _this2 = this;\n\n      if (!pos) {\n        console.error('[GeoManager._geoSuccess] - position missing or incorrect format');\n        return;\n      } // Notify new position\n\n\n      this.position = pos;\n      this.position$.next(pos); // Sets last registered position\n\n      this.lastPosition = pos; // exec only if position.coords.accuracy is < than accuracy threshold\n\n      if (pos.coords.accuracy > this._config.options.accuracy) {\n        return;\n      }\n\n      this._config.positions.forEach(function (position) {\n        // calc distance [m]\n        var dist = _this2._calcGeoDistance(pos.coords.longitude, pos.coords.latitude, position.lon, position.lat); // calc rardiuses\n\n\n        var inside = position.radius || _this2._config.options.defaultRadius;\n        var outside = (position.radius || _this2._config.options.defaultRadius) + (position.deadband || _this2._config.options.defaultDeadband);\n        var fetch = (position.fetch || _this2._config.options.defaultFetch) * inside;\n\n        if (_this2.inside.includes(position.id)) {\n          // already inside\n          if (dist > outside) {\n            // outside radius + deadband\n            _this2.inside = _this2.inside.filter(function (e) {\n              return e !== position.id;\n            });\n\n            _this2.outgoing$.next(position.id);\n          }\n        } else {\n          // currently not inside\n          if (dist <= inside) {\n            // inside play area\n            _this2.inside.push(position.id);\n\n            _this2.inside$.next(position.id);\n          } else if (dist <= fetch) {\n            // inside prefetch area\n            _this2.incoming$.next(position);\n          }\n        }\n      });\n    }\n    /**\r\n    * Geolocation API reports an error retrieving current position\r\n    * @param { Object } error - error as sent from geolocation API\r\n    */\n\n  }, {\n    key: \"_geoError\",\n    value: function _geoError(error) {\n      console.error('[GeoManager._geoError] - Geolocation error', error);\n    }\n    /**\r\n    * Computes the distance between two coordinates\r\n    * @param { number } lon1 - longitude of first coord\r\n    * @param { number } lat1 - latitude of first coord\r\n    * @param { number } lon2 - longitude of second coord\r\n    * @param { number } lat2 - latitude of second coord\r\n    * @returns { number } distance between coordinates\r\n    */\n\n  }, {\n    key: \"_calcGeoDistance\",\n    value: function _calcGeoDistance(lon1, lat1, lon2, lat2) {\n      // Radius of the earth in km\n      var EARTH_R = 6371; // Javascript functions in radians\n\n      var dLat = (lat2 - lat1).toRad();\n      var dLon = (lon2 - lon1).toRad(); //\n\n      var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1.toRad()) * Math.cos(lat2.toRad()) * Math.sin(dLon / 2) * Math.sin(dLon / 2); //\n\n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); // Distance in m\n\n      var dist = EARTH_R * c * 1000;\n      return dist;\n    }\n  }]);\n\n  return GeoManager;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/GeoManager.js\n");

/***/ }),

/***/ "./src/constants.js":
/*!**************************!*\
  !*** ./src/constants.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DEFAULT_VISITED_FILTER_TIME\": () => /* binding */ DEFAULT_VISITED_FILTER_TIME,\n/* harmony export */   \"DEFAULT_PATTERN_COOKIE_PREFIX\": () => /* binding */ DEFAULT_PATTERN_COOKIE_PREFIX,\n/* harmony export */   \"DEFAULT_PATTERN_COOKIE_EXPIRATION\": () => /* binding */ DEFAULT_PATTERN_COOKIE_EXPIRATION,\n/* harmony export */   \"DEFAULT_ACCURACY\": () => /* binding */ DEFAULT_ACCURACY,\n/* harmony export */   \"DEFAULT_DEADBAND\": () => /* binding */ DEFAULT_DEADBAND,\n/* harmony export */   \"DEFAULT_RADIUS\": () => /* binding */ DEFAULT_RADIUS,\n/* harmony export */   \"DEFAULT_FETCH\": () => /* binding */ DEFAULT_FETCH,\n/* harmony export */   \"DEFAULT_FORCE_ACCURACY\": () => /* binding */ DEFAULT_FORCE_ACCURACY,\n/* harmony export */   \"DEFAULT_FADE_IN_TIME\": () => /* binding */ DEFAULT_FADE_IN_TIME,\n/* harmony export */   \"DEFAULT_FADE_OUT_TIME\": () => /* binding */ DEFAULT_FADE_OUT_TIME\n/* harmony export */ });\n/**\r\n * Experience Manager\r\n */\n// time to wait to see if somthing goes active before setting a spot as visited\nvar DEFAULT_VISITED_FILTER_TIME = 5000; // ms\n// pattern visited spots cookie prefix\n\nvar DEFAULT_PATTERN_COOKIE_PREFIX = 'geoxp-pattern'; // pattern visited spots cookie default expiration time\n\nvar DEFAULT_PATTERN_COOKIE_EXPIRATION = 5; // [min]\n\n/**\r\n * Geo Manager\r\n */\n// minimum accuracy (in meters) to consider a position update as valid\n\nvar DEFAULT_ACCURACY = 25; // meters\n// position deadband\n\nvar DEFAULT_DEADBAND = 10; // meters\n// position play distance\n\nvar DEFAULT_RADIUS = 20; // meters\n// position fetch distance as\n\nvar DEFAULT_FETCH = 1; // multiplication coefficient\n// MANUAL MODE - minimum accuracy (in meters) to allow manual mode (force spot)\n\nvar DEFAULT_FORCE_ACCURACY = 100; // m\n\n/**\r\n * Audio Manager\r\n */\n// fade in time\n\nvar DEFAULT_FADE_IN_TIME = 0; // ms\n// fade out time\n\nvar DEFAULT_FADE_OUT_TIME = 1000; // ms//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL3NyYy9jb25zdGFudHMuanM/NWZiMCJdLCJuYW1lcyI6WyJERUZBVUxUX1ZJU0lURURfRklMVEVSX1RJTUUiLCJERUZBVUxUX1BBVFRFUk5fQ09PS0lFX1BSRUZJWCIsIkRFRkFVTFRfUEFUVEVSTl9DT09LSUVfRVhQSVJBVElPTiIsIkRFRkFVTFRfQUNDVVJBQ1kiLCJERUZBVUxUX0RFQURCQU5EIiwiREVGQVVMVF9SQURJVVMiLCJERUZBVUxUX0ZFVENIIiwiREVGQVVMVF9GT1JDRV9BQ0NVUkFDWSIsIkRFRkFVTFRfRkFERV9JTl9USU1FIiwiREVGQVVMVF9GQURFX09VVF9USU1FIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFDTyxJQUFNQSwyQkFBMkIsR0FBRyxJQUFwQyxDLENBQTBDO0FBRWpEOztBQUNPLElBQU1DLDZCQUE2QixHQUFHLGVBQXRDLEMsQ0FFUDs7QUFDTyxJQUFNQyxpQ0FBaUMsR0FBRyxDQUExQyxDLENBQTZDOztBQUlwRDtBQUNBO0FBQ0E7QUFFQTs7QUFDTyxJQUFNQyxnQkFBZ0IsR0FBRyxFQUF6QixDLENBQTZCO0FBRXBDOztBQUNPLElBQU1DLGdCQUFnQixHQUFHLEVBQXpCLEMsQ0FBNkI7QUFFcEM7O0FBQ08sSUFBTUMsY0FBYyxHQUFHLEVBQXZCLEMsQ0FBMkI7QUFFbEM7O0FBQ08sSUFBTUMsYUFBYSxHQUFHLENBQXRCLEMsQ0FBeUI7QUFFaEM7O0FBQ08sSUFBTUMsc0JBQXNCLEdBQUcsR0FBL0IsQyxDQUFvQzs7QUFHM0M7QUFDQTtBQUNBO0FBRUE7O0FBQ08sSUFBTUMsb0JBQW9CLEdBQUcsQ0FBN0IsQyxDQUFnQztBQUV2Qzs7QUFDTyxJQUFNQyxxQkFBcUIsR0FBRyxJQUE5QixDLENBQW9DIiwiZmlsZSI6Ii4vc3JjL2NvbnN0YW50cy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBFeHBlcmllbmNlIE1hbmFnZXJcclxuICovXHJcblxyXG4vLyB0aW1lIHRvIHdhaXQgdG8gc2VlIGlmIHNvbXRoaW5nIGdvZXMgYWN0aXZlIGJlZm9yZSBzZXR0aW5nIGEgc3BvdCBhcyB2aXNpdGVkXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1ZJU0lURURfRklMVEVSX1RJTUUgPSA1MDAwOyAvLyBtc1xyXG5cclxuLy8gcGF0dGVybiB2aXNpdGVkIHNwb3RzIGNvb2tpZSBwcmVmaXhcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfUEFUVEVSTl9DT09LSUVfUFJFRklYID0gJ2dlb3hwLXBhdHRlcm4nO1xyXG5cclxuLy8gcGF0dGVybiB2aXNpdGVkIHNwb3RzIGNvb2tpZSBkZWZhdWx0IGV4cGlyYXRpb24gdGltZVxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9QQVRURVJOX0NPT0tJRV9FWFBJUkFUSU9OID0gNTsgLy8gW21pbl1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEdlbyBNYW5hZ2VyXHJcbiAqL1xyXG5cclxuLy8gbWluaW11bSBhY2N1cmFjeSAoaW4gbWV0ZXJzKSB0byBjb25zaWRlciBhIHBvc2l0aW9uIHVwZGF0ZSBhcyB2YWxpZFxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9BQ0NVUkFDWSA9IDI1OyAvLyBtZXRlcnNcclxuXHJcbi8vIHBvc2l0aW9uIGRlYWRiYW5kXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX0RFQURCQU5EID0gMTA7IC8vIG1ldGVyc1xyXG5cclxuLy8gcG9zaXRpb24gcGxheSBkaXN0YW5jZVxyXG5leHBvcnQgY29uc3QgREVGQVVMVF9SQURJVVMgPSAyMDsgLy8gbWV0ZXJzXHJcblxyXG4vLyBwb3NpdGlvbiBmZXRjaCBkaXN0YW5jZSBhc1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9GRVRDSCA9IDE7IC8vIG11bHRpcGxpY2F0aW9uIGNvZWZmaWNpZW50XHJcblxyXG4vLyBNQU5VQUwgTU9ERSAtIG1pbmltdW0gYWNjdXJhY3kgKGluIG1ldGVycykgdG8gYWxsb3cgbWFudWFsIG1vZGUgKGZvcmNlIHNwb3QpXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX0ZPUkNFX0FDQ1VSQUNZID0gMTAwOyAvLyBtXHJcblxyXG5cclxuLyoqXHJcbiAqIEF1ZGlvIE1hbmFnZXJcclxuICovXHJcblxyXG4vLyBmYWRlIGluIHRpbWVcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfRkFERV9JTl9USU1FID0gMDsgLy8gbXNcclxuXHJcbi8vIGZhZGUgb3V0IHRpbWVcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfRkFERV9PVVRfVElNRSA9IDEwMDA7IC8vIG1zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/constants.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _GeoManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GeoManager */ \"./src/GeoManager.js\");\n/* harmony import */ var _AudioManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AudioManager */ \"./src/AudioManager.js\");\n/* harmony import */ var _ExperienceManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ExperienceManager */ \"./src/ExperienceManager.js\");\n/* harmony import */ var _utils_Device__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/Device */ \"./src/utils/Device.js\");\n/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/helpers */ \"./src/utils/helpers.js\");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n/* CORE MODULES */\n\n\n\n\n/* UTILS */\n\n\n //////////////////////////////////////////////\n// typedefs for jdoc\n//////////////////////////////////////////////\n\n/**\r\n* @typedef {Object} GeoCfg\r\n* @property { Object[] } positions - Geo positions\r\n* @property { string } positions[].id - Position id\r\n* @property { string } positions[].label - Position name/desc\r\n* @property { number } positions[].lat - Position latitude [degrees North]\r\n* @property { number } positions[].lon - Position longitude [degrees East]\r\n* @property { number } positions[].radius - Position inner radius [meters]\r\n* @property { number } positions[].deadband - Position deadband from inner radius [meters]\r\n* @property { number } positions[].fetch - Radius for content prefetching [rate of radius]\r\n* @property { Object } options - Geo options\r\n* @property { number } options.accuracy - Min acceptable accuracy [meters]\r\n* @property { number } options.defaultDeadband - Default deadband [meters]\r\n* @property { number } options.defaultRadius - Default position radius [meters]\r\n* @property { number } options.defaultFetch - Default prefetch distance [meters]\r\n*/\n\n/**\r\n* @typedef {Object} AudioCfg\r\n* @property { Object[] } sounds - Audio sounds\r\n* @property { string } sounds[].id - Sound id\r\n* @property { string } sounds[].label - Sound name/desc\r\n* @property { string } sounds[].url - Sound url, local or remote\r\n* @property { Object } options - Audio options\r\n* @property { string } options.test - Test sound url\r\n* @property { string } options.silence - Silence sound url\r\n* @property { string } options.visited - Visited spot audio url\r\n* @property { string } options.fadeInTime - fade time after play [ms]\r\n* @property { string } options.fadeOutTime - fade time before stop [ms]\r\n*/\n\n/**\r\n* @typedef {Object} ExperienceCfg\r\n* @property { string } patterns[].id - Pattern id\r\n* @property { string } patterns[].label - Pattern name/desc\r\n* @property { boolean } [patterns[].disabled = null] - Pattern is disabled\r\n* @property { boolean } [patterns[].replay = null] - Pattern spots are replayed by default\r\n* @property { boolean } [patterns[].overlap = null] - Pattern spots can overlap (more than one can be active at the same time)\r\n* @property { Object[] } patterns[].spots - Pattern spots\r\n* @property { string } patterns[].spots[].id - Spot id\r\n* @property { string } patterns[].spots[].position - Spot linked position id\r\n* @property { string } patterns[].spots[].audio - Spot linked audio id\r\n* @property { string } [patterns[].spots[].after = null] - Spot can go active only after this spot id has been visited\r\n* @property { string } [patterns[].spots[].notAfter = null] - Spot cannot go active after this spot id has been visited\r\n* @property { boolean } [patterns[].spots[].last = null] - Marks last spot in pattern\r\n* @property { Object } options - Experience options\r\n* @property { number } options.visitedFilter - Time before visisted spot is notified for filtering [seconds]\r\n* @property { Object|boolean } [options.cookies = null] - Pattern \"Visited spots\" cookies. Set to true to use default options. Use an object for custom values.\r\n* @property { boolean } [options.cookies.deleteOnLastSpot = null] - Visited spot cookie is deleted when \"last\" spot is visited\r\n* @property { boolean } [options.cookies.deleteOnCompletion = true] - Visited spot cookie is deleted all pattern spots have been visited. Overrides deleteOnLastSpot\r\n* @property { number } [options.cookies.expiration = 5] - Visited spot cookie expiration [min]\r\n*/\n\n/**\r\n* @typedef {Object} Spot\r\n* @property { string } id - Spot id\r\n* @property { string } label - Spot name/desc\r\n* @property { string } position - Spot linked position id\r\n* @property { string } audio - Spot linked audio id\r\n* @property { string } [after = null] - Spot can go active only after this spot id has been visited\r\n* @property { string } [notAfter = null] - Spot cannot go active after this spot id has been visited\r\n* @property { boolean } [last = null] - Marks last spot in pattern\r\n*/\n\n/**\r\n* @typedef {Object} Audio\r\n* @property { string } id - Audio id\r\n* @property { boolean } overlap - Audio can overlap with others yet playing\r\n* @property { boolean } playWhenReady - Audio is to be played immediately when loaded\r\n* @property { Spot } spot - Spot that owns this audio content\r\n* @property { Object } audio - Audio instance as [Howler.Howl] {@link https://pub.dev/documentation/howler/latest/howler/Howl-class.html}\r\n*/\n\n/**\r\n* play | end event listener\r\n* @callback audioListener\r\n* @param { Audio } audio\r\n*/\n\n/**\r\n* incoming | active | visited | ougoing event listener\r\n* @callback spotListener\r\n* @param { Spot } spot\r\n*/\n//////////////////////////////////////////////\n// geoXp class\n//////////////////////////////////////////////\n\n/**\r\n* Creates GeoXp class.\r\n* GeoXp manages the MezzoForte Geo Experience\r\n* @param { Object } config - Config options\r\n* @param { GeoCfg } config.geo - Geo config options\r\n* @param { AudioCfg } config.audio - Audio config options\r\n* @param { ExperienceCfg } config.experience - Experience config options\r\n* @returns { Object } GeoXp singleton instance\r\n* @constructor\r\n*/\n\nvar GeoXp = /*#__PURE__*/function () {\n  function GeoXp(config) {\n    var _this = this;\n\n    _classCallCheck(this, GeoXp);\n\n    // checks for config object\n    if (!config || !(0,_utils_helpers__WEBPACK_IMPORTED_MODULE_5__.isObjectLike)(config)) {\n      console.error('[GeoXp] - Missing or invalid config object! GeoXp needs a configuration object when creating an instance. Check the docs for details');\n      return;\n    }\n\n    if (!config.experience || !(0,_utils_helpers__WEBPACK_IMPORTED_MODULE_5__.isObjectLike)(config.experience)) {\n      console.error('[ExperienceManager] - Missing or invalid experience config! GeoXp needs an experience object in the configuration file. Check the docs for details');\n      return;\n    }\n\n    if (!config.geo || !(0,_utils_helpers__WEBPACK_IMPORTED_MODULE_5__.isObjectLike)(config.geo)) {\n      console.error('[GeoManager] - Missing or invalid geo config! GeoXp needs a geo object in the configuration file. Check the docs for details');\n      return;\n    }\n\n    if (!config.audio || !(0,_utils_helpers__WEBPACK_IMPORTED_MODULE_5__.isObjectLike)(config.audio)) {\n      console.error('[AudioManager] - Missing or invalid audio config! GeoXp needs an audio object in the configuration file. Check the docs for details');\n      return;\n    }\n\n    this._config = config; // instantiates modules\n\n    this.geo = new _GeoManager__WEBPACK_IMPORTED_MODULE_1__.default(config.geo);\n    this.audio = new _AudioManager__WEBPACK_IMPORTED_MODULE_2__.default(config.audio);\n    this.experience = new _ExperienceManager__WEBPACK_IMPORTED_MODULE_3__.default(config.experience); // exposes static classes\n\n    this.utils = {\n      device: _utils_Device__WEBPACK_IMPORTED_MODULE_4__.default\n    }; // exposes event emitter\n\n    this.event = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter(); //////////////////////////////////////////////\n    // subscribes to InventoryManager requests\n    //////////////////////////////////////////////\n    // request for positions refresh\n\n    this.subExperienceRefresh = this.experience.geoRefresh$.subscribe(function () {\n      // resend inside positions\n      _this.geo.refresh();\n    }); // request for audio preloading\n\n    this.subExperienceIncoming = this.experience.spotIncoming$.subscribe(function (info) {\n      // load spot audio\n      _this.audio.load(info.spot, info.overlap); // emits spot incoming\n\n\n      _this.event.emit('incoming', info.spot);\n    }); // request for audio play\n\n    this.subExperienceActive = this.experience.spotActive$.subscribe(function (info) {\n      // play spot audio\n      _this.audio.play(info.spot, info.overlap); // emits spot active\n\n\n      _this.event.emit('active', info.spot);\n    }); // alredy visisted spot\n\n    this.subExperienceVisited = this.experience.spotVisited$.subscribe(function (spot) {\n      // emits spot visided\n      _this.event.emit('visited', spot);\n    }); // request for audio stop\n\n    this.subExperienceOutgoing = this.experience.spotOutgoing$.subscribe(function (spot) {\n      // stop spot audio\n      _this.audio.stop(spot); // emits spot outgoing\n\n\n      _this.event.emit('outgoing', spot);\n    }); //////////////////////////////////////////////\n    // subscribes to GeoManager position updates\n    //////////////////////////////////////////////\n    // current position\n\n    this.subGeoPosition = this.geo.position$.subscribe(function (position) {\n      // emits current position\n      _this.event.emit('position', position);\n    }); // incoming spots\n\n    this.subGeoIncoming = this.geo.incoming$.subscribe(function (position) {\n      // sends to experienceManager for processing\n      _this.experience.incoming(position);\n    }); // inside spots\n\n    this.subGeoInside = this.geo.inside$.subscribe(function (position) {\n      // if forced, do not notify position\n      if (_this.experience.forced) return; // sends to experienceManager for processing\n\n      _this.experience.inside(position);\n    }); // outgoing spot\n\n    this.subGeoOutgoing = this.geo.outgoing$.subscribe(function (position) {\n      // sends to experienceManager for processing\n      _this.experience.outgoing(position);\n    }); //////////////////////////////////////////////\n    // subscribes to AudioManager events\n    //////////////////////////////////////////////\n    // sound playing\n\n    this.subAudioPlay = this.audio.play$.subscribe(function (audio) {\n      // sends to experienceManager for processing\n      _this.experience.playing(audio.spot); // emits playing audio\n\n\n      _this.event.emit('play', audio);\n    }); // sound finished\n\n    this.subAudioDone = this.audio.done$.subscribe(function (audio) {\n      // sends to experienceManager for processing\n      var removeForce = _this.experience.end(audio.spot); // removes forcing\n\n\n      if (removeForce) {\n        _this.removeForce();\n      } // emits stopped audio\n\n\n      _this.event.emit('stop', audio);\n    });\n  }\n  /**\r\n  * Unlock method forces geolocation api and howler js activation.\r\n  * This is needed in mobile integration, to avoid browser locking the functionalities when app goes background\r\n  * **IMPORTANT - call this method within a user action, such as a click listener!**\r\n  */\n\n\n  _createClass(GeoXp, [{\n    key: \"unlock\",\n    value: function unlock() {\n      this.geo.unlock();\n      this.audio.unlock();\n    }\n    /**\r\n    * Enables/disables defalut internal geolocation system [Geolocation API]{@link https://developer.mozilla.org/it/docs/Web/API/Geolocation}.\r\n    * In case you have an external geolocation system, you may want to disable this calling `internalGeolocation(false)` and update the position with the `updateGeolocation` method.\r\n    * @param { boolean } enabled - enable or disable\r\n    */\n\n  }, {\n    key: \"internalGeolocation\",\n    value: function internalGeolocation(enabled) {\n      this.geo.internalGeolocation(enabled);\n    }\n    /**\r\n    * Provides external geolocation updates (in case geolocation API isn’t available and/or you want to use an external Geolocation system).\r\n    * Can also be used for development purposes, to simulate user location\r\n    * @param { Object } position - position data in [Geolocation API position format]{@link https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPosition}\r\n    */\n\n  }, {\n    key: \"updateGeolocation\",\n    value: function updateGeolocation(position) {\n      this.geo._geoSuccess(position);\n    }\n    /**\r\n    * Enables a configured experience pattern\r\n    * @param { string } id - pattern id to enable\r\n    */\n\n  }, {\n    key: \"enablePattern\",\n    value: function enablePattern(id) {\n      this.experience.enablePattern(id);\n    }\n    /**\r\n    * Disables a configured experience pattern\r\n    * @param { string } id - pattern id to disable\r\n    */\n\n  }, {\n    key: \"disablePattern\",\n    value: function disablePattern(id) {\n      this.experience.disablePattern(id);\n    }\n    /**\r\n    * Returns true if has active spots\r\n    * @returns { boolean } Some spots are active\r\n    */\n\n  }, {\n    key: \"hasActiveSpots\",\n    value: function hasActiveSpots() {\n      return this.experience.hasActiveSpots();\n    }\n    /**\r\n    * Gets visited spots for a given pattern\r\n    * @param { string } id - pattern id\r\n    * @returns { string[] } array of visited spots\r\n    */\n\n  }, {\n    key: \"getVisitedSpots\",\n    value: function getVisitedSpots(id) {\n      return this.experience.getVisitedSpots(id);\n    }\n    /**\r\n    * Returns spot by id\r\n    * @param { string } id - id of spot to find\r\n    * @returns { Spot | null } Spot found or null\r\n    */\n\n  }, {\n    key: \"getSpot\",\n    value: function getSpot(id) {\n      return this.experience.getSpot(id);\n    }\n    /**\r\n    * Marks spots as unvisited.\r\n    * If no spot id provided, marks all inside spots as unvisited\r\n    * @param { string } [id = null] - id of spot to unvisit\r\n    */\n\n  }, {\n    key: \"replaySpot\",\n    value: function replaySpot() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      this.experience.replaySpot(id);\n    }\n    /**\r\n    * Checks if manual mode is available.\r\n    * Rules are:\r\n    * Your gps accuracy is really bad\r\n    * You are not too far away\r\n    * @param { string } id - id of spot to force\r\n    * @returns { boolean } Spot force is available\r\n    * */\n\n  }, {\n    key: \"canForceSpot\",\n    value: function canForceSpot(id) {\n      // checks if can force current spot based on its position\n      var position = this.experience.getSpot(id).position;\n      return this.geo.canForceSpot(position);\n    }\n    /**\r\n    * Forces spot activation (manual mode)\r\n    * Forces other spots deactivation unless overlapping\r\n    * Rules are\r\n    * Your gps accuracy is really bad\r\n    * You are not too far away\r\n    * @param { string } id - spot id\r\n    * */\n\n  }, {\n    key: \"forceSpot\",\n    value: function forceSpot(id) {\n      // checks if can be forced\n      if (!this.canForceSpot(id)) return; // stops internal geolocation\n\n      this.geo.internalGeolocation(false); // forces spot\n\n      this.experience.forceSpot(id);\n    }\n    /**\r\n    * Removes the forced spot activation\r\n    * */\n\n  }, {\n    key: \"removeForce\",\n    value: function removeForce() {\n      this.experience.forced = null;\n      this.geo.internalGeolocation(true);\n      this.geo.refresh();\n    }\n    /**\r\n    * Checks if any sound is playing\r\n    * @param { boolean } [overlap = false] - if true, excludes overlapping audios\r\n    * @returns { boolean } Sounds are playing\r\n    * */\n\n  }, {\n    key: \"hasAudioPlaying\",\n    value: function hasAudioPlaying() {\n      var overlap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this.audio.hasAudioPlaying(overlap);\n    }\n    /**\r\n    * Clears pattern cookies, if no pattern specified, clears all\r\n    * @param { string } [id = null] - id of pattern to clear\r\n    */\n\n  }, {\n    key: \"clearCookies\",\n    value: function clearCookies() {\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      this.experience.clearCookies(id);\n    }\n    /**\r\n    * Loads a new configuration\r\n    * @param { Object } config - Config options\r\n    * @param { GeoCfg } config.geo - Geo config options\r\n    * @param { AudioCfg } config.audio - Audio config options\r\n    * @param { ExperienceCfg } config.experience - Experience config options\r\n    */\n\n  }, {\n    key: \"reload\",\n    value: function reload(config) {\n      this._config = config;\n      this.geo.reload(config.geo);\n      this.audio.reload(config.audio);\n      this.experience.reload(config.experience);\n    }\n    /**\r\n    * Destroys GeoXp instance\r\n    */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.subExperienceIncoming.unsubscribe();\n      this.subExperienceActive.unsubscribe();\n      this.subExperienceVisited.unsubscribe();\n      this.subExperienceOutgoing.unsubscribe();\n      this.subExperienceRefresh.unsubscribe();\n      this.subAudioDone.unsubscribe();\n      this.subAudioPlay.unsubscribe();\n      this.subGeoPosition.unsubscribe();\n      this.subGeoInside.unsubscribe();\n      this.subGeoOutgoing.unsubscribe();\n      this.subGeoIncoming.unsubscribe();\n      this.geo.unload();\n      this.audio.unload();\n      this.experience.unload();\n    }\n    /**\r\n    * Event wrapper on\r\n    * @param { string } eventName - 'incoming', 'active', 'visited', 'outgoing', 'position', 'play', 'end'\r\n    * @param { spotListener | audioListener } listener - listener\r\n    */\n\n  }, {\n    key: \"on\",\n    value: function on(eventName, listener) {\n      if (typeof listener !== 'function') {\n        console.error('[GeoXp EventEmitter - on] listener must be a function');\n        return;\n      }\n\n      this.event.on(eventName, listener);\n    }\n    /**\r\n    * Event wrapper once\r\n    * @param { string } eventName - 'incoming', 'active', 'visited', 'outgoing', 'position', 'play', 'end'\r\n    * @param { spotListener | audioListener } listener - listener\r\n    */\n\n  }, {\n    key: \"once\",\n    value: function once(eventName, listener) {\n      if (typeof listener !== 'function') {\n        console.error('[GeoXp EventEmitter - on] listener must be a function');\n        return;\n      }\n\n      this.event.once(eventName, listener);\n    }\n    /**\r\n    * Event wrapper off\r\n    * @param { string } eventName - 'incoming', 'active', 'visited', 'outgoing', 'position', 'play', 'end'\r\n    * @param { spotListener | audioListener } listener - listener\r\n    */\n\n  }, {\n    key: \"off\",\n    value: function off(eventName, listener) {\n      if (typeof listener !== 'function') {\n        console.error('[GeoXp EventEmitter - on] listener must be a function');\n        return;\n      }\n\n      this.event.off(eventName, listener);\n    }\n  }]);\n\n  return GeoXp;\n}();\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GeoXp);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL3NyYy9pbmRleC5qcz9iNjM1Il0sIm5hbWVzIjpbIkdlb1hwIiwiY29uZmlnIiwiaXNPYmplY3RMaWtlIiwiY29uc29sZSIsImVycm9yIiwiZXhwZXJpZW5jZSIsImdlbyIsImF1ZGlvIiwiX2NvbmZpZyIsIkdlb01hbmFnZXIiLCJBdWRpb01hbmFnZXIiLCJFeHBlcmllbmNlTWFuYWdlciIsInV0aWxzIiwiZGV2aWNlIiwiRGV2aWNlIiwiZXZlbnQiLCJFdmVudEVtaXR0ZXIiLCJzdWJFeHBlcmllbmNlUmVmcmVzaCIsImdlb1JlZnJlc2gkIiwic3Vic2NyaWJlIiwicmVmcmVzaCIsInN1YkV4cGVyaWVuY2VJbmNvbWluZyIsInNwb3RJbmNvbWluZyQiLCJpbmZvIiwibG9hZCIsInNwb3QiLCJvdmVybGFwIiwiZW1pdCIsInN1YkV4cGVyaWVuY2VBY3RpdmUiLCJzcG90QWN0aXZlJCIsInBsYXkiLCJzdWJFeHBlcmllbmNlVmlzaXRlZCIsInNwb3RWaXNpdGVkJCIsInN1YkV4cGVyaWVuY2VPdXRnb2luZyIsInNwb3RPdXRnb2luZyQiLCJzdG9wIiwic3ViR2VvUG9zaXRpb24iLCJwb3NpdGlvbiQiLCJwb3NpdGlvbiIsInN1Ykdlb0luY29taW5nIiwiaW5jb21pbmckIiwiaW5jb21pbmciLCJzdWJHZW9JbnNpZGUiLCJpbnNpZGUkIiwiZm9yY2VkIiwiaW5zaWRlIiwic3ViR2VvT3V0Z29pbmciLCJvdXRnb2luZyQiLCJvdXRnb2luZyIsInN1YkF1ZGlvUGxheSIsInBsYXkkIiwicGxheWluZyIsInN1YkF1ZGlvRG9uZSIsImRvbmUkIiwicmVtb3ZlRm9yY2UiLCJlbmQiLCJ1bmxvY2siLCJlbmFibGVkIiwiaW50ZXJuYWxHZW9sb2NhdGlvbiIsIl9nZW9TdWNjZXNzIiwiaWQiLCJlbmFibGVQYXR0ZXJuIiwiZGlzYWJsZVBhdHRlcm4iLCJoYXNBY3RpdmVTcG90cyIsImdldFZpc2l0ZWRTcG90cyIsImdldFNwb3QiLCJyZXBsYXlTcG90IiwiY2FuRm9yY2VTcG90IiwiZm9yY2VTcG90IiwiaGFzQXVkaW9QbGF5aW5nIiwiY2xlYXJDb29raWVzIiwicmVsb2FkIiwidW5zdWJzY3JpYmUiLCJ1bmxvYWQiLCJldmVudE5hbWUiLCJsaXN0ZW5lciIsIm9uIiwib25jZSIsIm9mZiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUVBOztBQUNBO0FBRUE7QUFFQTtBQUVBOztBQUNBO0NBSUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7SUFDTUEsSztBQUNKLGlCQUFZQyxNQUFaLEVBQW9CO0FBQUE7O0FBQUE7O0FBRWxCO0FBQ0EsUUFBSSxDQUFDQSxNQUFELElBQVcsQ0FBQ0MsNERBQVksQ0FBQ0QsTUFBRCxDQUE1QixFQUFzQztBQUNwQ0UsYUFBTyxDQUFDQyxLQUFSLENBQWMsc0lBQWQ7QUFDQTtBQUNEOztBQUVELFFBQUksQ0FBQ0gsTUFBTSxDQUFDSSxVQUFSLElBQXNCLENBQUNILDREQUFZLENBQUNELE1BQU0sQ0FBQ0ksVUFBUixDQUF2QyxFQUE0RDtBQUMxREYsYUFBTyxDQUFDQyxLQUFSLENBQWMsb0pBQWQ7QUFDQTtBQUNEOztBQUVELFFBQUksQ0FBQ0gsTUFBTSxDQUFDSyxHQUFSLElBQWUsQ0FBQ0osNERBQVksQ0FBQ0QsTUFBTSxDQUFDSyxHQUFSLENBQWhDLEVBQThDO0FBQzVDSCxhQUFPLENBQUNDLEtBQVIsQ0FBYyw4SEFBZDtBQUNBO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDSCxNQUFNLENBQUNNLEtBQVIsSUFBaUIsQ0FBQ0wsNERBQVksQ0FBQ0QsTUFBTSxDQUFDTSxLQUFSLENBQWxDLEVBQWtEO0FBQ2hESixhQUFPLENBQUNDLEtBQVIsQ0FBYyxxSUFBZDtBQUNBO0FBQ0Q7O0FBRUQsU0FBS0ksT0FBTCxHQUFlUCxNQUFmLENBdkJrQixDQXlCbEI7O0FBQ0EsU0FBS0ssR0FBTCxHQUFXLElBQUlHLGdEQUFKLENBQWVSLE1BQU0sQ0FBQ0ssR0FBdEIsQ0FBWDtBQUNBLFNBQUtDLEtBQUwsR0FBYSxJQUFJRyxrREFBSixDQUFpQlQsTUFBTSxDQUFDTSxLQUF4QixDQUFiO0FBQ0EsU0FBS0YsVUFBTCxHQUFrQixJQUFJTSx1REFBSixDQUFzQlYsTUFBTSxDQUFDSSxVQUE3QixDQUFsQixDQTVCa0IsQ0E4QmxCOztBQUNBLFNBQUtPLEtBQUwsR0FBYTtBQUNYQyxZQUFNLEVBQUVDLGtEQUFNQTtBQURILEtBQWIsQ0EvQmtCLENBbUNsQjs7QUFDQSxTQUFLQyxLQUFMLEdBQWEsSUFBSUMsZ0RBQUosRUFBYixDQXBDa0IsQ0F1Q2xCO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQUtDLG9CQUFMLEdBQTRCLEtBQUtaLFVBQUwsQ0FBZ0JhLFdBQWhCLENBQ3pCQyxTQUR5QixDQUNmLFlBQU07QUFFZjtBQUNBLFdBQUksQ0FBQ2IsR0FBTCxDQUFTYyxPQUFUO0FBQ0QsS0FMeUIsQ0FBNUIsQ0EzQ2tCLENBa0RsQjs7QUFDQSxTQUFLQyxxQkFBTCxHQUE2QixLQUFLaEIsVUFBTCxDQUFnQmlCLGFBQWhCLENBQzFCSCxTQUQwQixDQUNoQixVQUFBSSxJQUFJLEVBQUk7QUFFakI7QUFDQSxXQUFJLENBQUNoQixLQUFMLENBQVdpQixJQUFYLENBQWdCRCxJQUFJLENBQUNFLElBQXJCLEVBQTJCRixJQUFJLENBQUNHLE9BQWhDLEVBSGlCLENBS2pCOzs7QUFDQSxXQUFJLENBQUNYLEtBQUwsQ0FBV1ksSUFBWCxDQUFnQixVQUFoQixFQUE0QkosSUFBSSxDQUFDRSxJQUFqQztBQUNELEtBUjBCLENBQTdCLENBbkRrQixDQTZEbEI7O0FBQ0EsU0FBS0csbUJBQUwsR0FBMkIsS0FBS3ZCLFVBQUwsQ0FBZ0J3QixXQUFoQixDQUN4QlYsU0FEd0IsQ0FDZCxVQUFBSSxJQUFJLEVBQUk7QUFFakI7QUFDQSxXQUFJLENBQUNoQixLQUFMLENBQVd1QixJQUFYLENBQWdCUCxJQUFJLENBQUNFLElBQXJCLEVBQTJCRixJQUFJLENBQUNHLE9BQWhDLEVBSGlCLENBS2pCOzs7QUFDQSxXQUFJLENBQUNYLEtBQUwsQ0FBV1ksSUFBWCxDQUFnQixRQUFoQixFQUEwQkosSUFBSSxDQUFDRSxJQUEvQjtBQUNELEtBUndCLENBQTNCLENBOURrQixDQXdFbEI7O0FBQ0EsU0FBS00sb0JBQUwsR0FBNEIsS0FBSzFCLFVBQUwsQ0FBZ0IyQixZQUFoQixDQUN6QmIsU0FEeUIsQ0FDZixVQUFBTSxJQUFJLEVBQUk7QUFFakI7QUFDQSxXQUFJLENBQUNWLEtBQUwsQ0FBV1ksSUFBWCxDQUFnQixTQUFoQixFQUEyQkYsSUFBM0I7QUFDRCxLQUx5QixDQUE1QixDQXpFa0IsQ0FnRmxCOztBQUNBLFNBQUtRLHFCQUFMLEdBQTZCLEtBQUs1QixVQUFMLENBQWdCNkIsYUFBaEIsQ0FDMUJmLFNBRDBCLENBQ2hCLFVBQUFNLElBQUksRUFBSTtBQUVqQjtBQUNBLFdBQUksQ0FBQ2xCLEtBQUwsQ0FBVzRCLElBQVgsQ0FBZ0JWLElBQWhCLEVBSGlCLENBS2pCOzs7QUFDQSxXQUFJLENBQUNWLEtBQUwsQ0FBV1ksSUFBWCxDQUFnQixVQUFoQixFQUE0QkYsSUFBNUI7QUFDRCxLQVIwQixDQUE3QixDQWpGa0IsQ0E0RmxCO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQUtXLGNBQUwsR0FBc0IsS0FBSzlCLEdBQUwsQ0FBUytCLFNBQVQsQ0FDbkJsQixTQURtQixDQUNULFVBQUFtQixRQUFRLEVBQUk7QUFFckI7QUFDQSxXQUFJLENBQUN2QixLQUFMLENBQVdZLElBQVgsQ0FBZ0IsVUFBaEIsRUFBNEJXLFFBQTVCO0FBQ0QsS0FMbUIsQ0FBdEIsQ0FoR2tCLENBdUdsQjs7QUFDQSxTQUFLQyxjQUFMLEdBQXNCLEtBQUtqQyxHQUFMLENBQVNrQyxTQUFULENBQ25CckIsU0FEbUIsQ0FDVCxVQUFBbUIsUUFBUSxFQUFJO0FBRXJCO0FBQ0EsV0FBSSxDQUFDakMsVUFBTCxDQUFnQm9DLFFBQWhCLENBQXlCSCxRQUF6QjtBQUNELEtBTG1CLENBQXRCLENBeEdrQixDQStHbEI7O0FBQ0EsU0FBS0ksWUFBTCxHQUFvQixLQUFLcEMsR0FBTCxDQUFTcUMsT0FBVCxDQUNqQnhCLFNBRGlCLENBQ1AsVUFBQW1CLFFBQVEsRUFBSTtBQUVyQjtBQUNBLFVBQUksS0FBSSxDQUFDakMsVUFBTCxDQUFnQnVDLE1BQXBCLEVBQTRCLE9BSFAsQ0FLckI7O0FBQ0EsV0FBSSxDQUFDdkMsVUFBTCxDQUFnQndDLE1BQWhCLENBQXVCUCxRQUF2QjtBQUNELEtBUmlCLENBQXBCLENBaEhrQixDQTBIbEI7O0FBQ0EsU0FBS1EsY0FBTCxHQUFzQixLQUFLeEMsR0FBTCxDQUFTeUMsU0FBVCxDQUNuQjVCLFNBRG1CLENBQ1QsVUFBQW1CLFFBQVEsRUFBSTtBQUVyQjtBQUNBLFdBQUksQ0FBQ2pDLFVBQUwsQ0FBZ0IyQyxRQUFoQixDQUF5QlYsUUFBekI7QUFDRCxLQUxtQixDQUF0QixDQTNIa0IsQ0FtSWxCO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQUtXLFlBQUwsR0FBb0IsS0FBSzFDLEtBQUwsQ0FBVzJDLEtBQVgsQ0FDakIvQixTQURpQixDQUNQLFVBQUFaLEtBQUssRUFBSTtBQUVsQjtBQUNBLFdBQUksQ0FBQ0YsVUFBTCxDQUFnQjhDLE9BQWhCLENBQXdCNUMsS0FBSyxDQUFDa0IsSUFBOUIsRUFIa0IsQ0FLbEI7OztBQUNBLFdBQUksQ0FBQ1YsS0FBTCxDQUFXWSxJQUFYLENBQWdCLE1BQWhCLEVBQXdCcEIsS0FBeEI7QUFDRCxLQVJpQixDQUFwQixDQXZJa0IsQ0FpSmxCOztBQUNBLFNBQUs2QyxZQUFMLEdBQW9CLEtBQUs3QyxLQUFMLENBQVc4QyxLQUFYLENBQ2pCbEMsU0FEaUIsQ0FDUCxVQUFBWixLQUFLLEVBQUk7QUFFbEI7QUFDQSxVQUFNK0MsV0FBVyxHQUFHLEtBQUksQ0FBQ2pELFVBQUwsQ0FBZ0JrRCxHQUFoQixDQUFvQmhELEtBQUssQ0FBQ2tCLElBQTFCLENBQXBCLENBSGtCLENBS2xCOzs7QUFDQSxVQUFJNkIsV0FBSixFQUFpQjtBQUNmLGFBQUksQ0FBQ0EsV0FBTDtBQUNELE9BUmlCLENBVWxCOzs7QUFDQSxXQUFJLENBQUN2QyxLQUFMLENBQVdZLElBQVgsQ0FBZ0IsTUFBaEIsRUFBd0JwQixLQUF4QjtBQUNELEtBYmlCLENBQXBCO0FBY0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7OztXQUNFLGtCQUFTO0FBQ1AsV0FBS0QsR0FBTCxDQUFTa0QsTUFBVDtBQUNBLFdBQUtqRCxLQUFMLENBQVdpRCxNQUFYO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7O1dBQ0UsNkJBQW9CQyxPQUFwQixFQUE2QjtBQUMzQixXQUFLbkQsR0FBTCxDQUFTb0QsbUJBQVQsQ0FBNkJELE9BQTdCO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7O1dBQ0UsMkJBQWtCbkIsUUFBbEIsRUFBNEI7QUFDMUIsV0FBS2hDLEdBQUwsQ0FBU3FELFdBQVQsQ0FBcUJyQixRQUFyQjtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7Ozs7V0FDRSx1QkFBY3NCLEVBQWQsRUFBa0I7QUFDaEIsV0FBS3ZELFVBQUwsQ0FBZ0J3RCxhQUFoQixDQUE4QkQsRUFBOUI7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBOzs7O1dBQ0Usd0JBQWVBLEVBQWYsRUFBbUI7QUFDakIsV0FBS3ZELFVBQUwsQ0FBZ0J5RCxjQUFoQixDQUErQkYsRUFBL0I7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBOzs7O1dBQ0UsMEJBQWlCO0FBQ2YsYUFBTyxLQUFLdkQsVUFBTCxDQUFnQjBELGNBQWhCLEVBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7V0FDRSx5QkFBZ0JILEVBQWhCLEVBQW9CO0FBQ2xCLGFBQU8sS0FBS3ZELFVBQUwsQ0FBZ0IyRCxlQUFoQixDQUFnQ0osRUFBaEMsQ0FBUDtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7OztXQUNFLGlCQUFRQSxFQUFSLEVBQVk7QUFDVixhQUFPLEtBQUt2RCxVQUFMLENBQWdCNEQsT0FBaEIsQ0FBd0JMLEVBQXhCLENBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7V0FDRSxzQkFBc0I7QUFBQSxVQUFYQSxFQUFXLHVFQUFOLElBQU07QUFDcEIsV0FBS3ZELFVBQUwsQ0FBZ0I2RCxVQUFoQixDQUEyQk4sRUFBM0I7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7V0FDRSxzQkFBYUEsRUFBYixFQUFpQjtBQUVmO0FBQ0EsVUFBTXRCLFFBQVEsR0FBRyxLQUFLakMsVUFBTCxDQUFnQjRELE9BQWhCLENBQXdCTCxFQUF4QixFQUE0QnRCLFFBQTdDO0FBQ0EsYUFBTyxLQUFLaEMsR0FBTCxDQUFTNkQsWUFBVCxDQUFzQjdCLFFBQXRCLENBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7V0FDRSxtQkFBVXNCLEVBQVYsRUFBYztBQUVaO0FBQ0EsVUFBSSxDQUFDLEtBQUtPLFlBQUwsQ0FBa0JQLEVBQWxCLENBQUwsRUFBNEIsT0FIaEIsQ0FLWjs7QUFDQSxXQUFLdEQsR0FBTCxDQUFTb0QsbUJBQVQsQ0FBNkIsS0FBN0IsRUFOWSxDQVFaOztBQUNBLFdBQUtyRCxVQUFMLENBQWdCK0QsU0FBaEIsQ0FBMEJSLEVBQTFCO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7Ozs7V0FDRSx1QkFBYztBQUNaLFdBQUt2RCxVQUFMLENBQWdCdUMsTUFBaEIsR0FBeUIsSUFBekI7QUFDQSxXQUFLdEMsR0FBTCxDQUFTb0QsbUJBQVQsQ0FBNkIsSUFBN0I7QUFDQSxXQUFLcEQsR0FBTCxDQUFTYyxPQUFUO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7O1dBQ0UsMkJBQWlDO0FBQUEsVUFBakJNLE9BQWlCLHVFQUFQLEtBQU87QUFDL0IsYUFBTyxLQUFLbkIsS0FBTCxDQUFXOEQsZUFBWCxDQUEyQjNDLE9BQTNCLENBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBOzs7O1dBQ0Usd0JBQXdCO0FBQUEsVUFBWGtDLEVBQVcsdUVBQU4sSUFBTTtBQUN0QixXQUFLdkQsVUFBTCxDQUFnQmlFLFlBQWhCLENBQTZCVixFQUE3QjtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7V0FDRSxnQkFBTzNELE1BQVAsRUFBZTtBQUNiLFdBQUtPLE9BQUwsR0FBZVAsTUFBZjtBQUNBLFdBQUtLLEdBQUwsQ0FBU2lFLE1BQVQsQ0FBZ0J0RSxNQUFNLENBQUNLLEdBQXZCO0FBQ0EsV0FBS0MsS0FBTCxDQUFXZ0UsTUFBWCxDQUFrQnRFLE1BQU0sQ0FBQ00sS0FBekI7QUFDQSxXQUFLRixVQUFMLENBQWdCa0UsTUFBaEIsQ0FBdUJ0RSxNQUFNLENBQUNJLFVBQTlCO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7Ozs7V0FDRSxtQkFBVTtBQUNSLFdBQUtnQixxQkFBTCxDQUEyQm1ELFdBQTNCO0FBQ0EsV0FBSzVDLG1CQUFMLENBQXlCNEMsV0FBekI7QUFDQSxXQUFLekMsb0JBQUwsQ0FBMEJ5QyxXQUExQjtBQUNBLFdBQUt2QyxxQkFBTCxDQUEyQnVDLFdBQTNCO0FBQ0EsV0FBS3ZELG9CQUFMLENBQTBCdUQsV0FBMUI7QUFDQSxXQUFLcEIsWUFBTCxDQUFrQm9CLFdBQWxCO0FBQ0EsV0FBS3ZCLFlBQUwsQ0FBa0J1QixXQUFsQjtBQUNBLFdBQUtwQyxjQUFMLENBQW9Cb0MsV0FBcEI7QUFDQSxXQUFLOUIsWUFBTCxDQUFrQjhCLFdBQWxCO0FBQ0EsV0FBSzFCLGNBQUwsQ0FBb0IwQixXQUFwQjtBQUNBLFdBQUtqQyxjQUFMLENBQW9CaUMsV0FBcEI7QUFFQSxXQUFLbEUsR0FBTCxDQUFTbUUsTUFBVDtBQUNBLFdBQUtsRSxLQUFMLENBQVdrRSxNQUFYO0FBQ0EsV0FBS3BFLFVBQUwsQ0FBZ0JvRSxNQUFoQjtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7OztXQUNFLFlBQUdDLFNBQUgsRUFBY0MsUUFBZCxFQUF3QjtBQUN0QixVQUFJLE9BQU9BLFFBQVAsS0FBb0IsVUFBeEIsRUFBb0M7QUFDbEN4RSxlQUFPLENBQUNDLEtBQVIsQ0FBYyx1REFBZDtBQUNBO0FBQ0Q7O0FBRUQsV0FBS1csS0FBTCxDQUFXNkQsRUFBWCxDQUFjRixTQUFkLEVBQXlCQyxRQUF6QjtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7OztXQUNFLGNBQUtELFNBQUwsRUFBZ0JDLFFBQWhCLEVBQTBCO0FBQ3hCLFVBQUksT0FBT0EsUUFBUCxLQUFvQixVQUF4QixFQUFvQztBQUNsQ3hFLGVBQU8sQ0FBQ0MsS0FBUixDQUFjLHVEQUFkO0FBQ0E7QUFDRDs7QUFFRCxXQUFLVyxLQUFMLENBQVc4RCxJQUFYLENBQWdCSCxTQUFoQixFQUEyQkMsUUFBM0I7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7V0FDRSxhQUFJRCxTQUFKLEVBQWVDLFFBQWYsRUFBeUI7QUFDdkIsVUFBSSxPQUFPQSxRQUFQLEtBQW9CLFVBQXhCLEVBQW9DO0FBQ2xDeEUsZUFBTyxDQUFDQyxLQUFSLENBQWMsdURBQWQ7QUFDQTtBQUNEOztBQUVELFdBQUtXLEtBQUwsQ0FBVytELEdBQVgsQ0FBZUosU0FBZixFQUEwQkMsUUFBMUI7QUFDRDs7Ozs7O0FBR0gsaUVBQWUzRSxLQUFmIiwiZmlsZSI6Ii4vc3JjL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcclxuXHJcbi8qIENPUkUgTU9EVUxFUyAqL1xyXG5pbXBvcnQgR2VvTWFuYWdlciBmcm9tICcuL0dlb01hbmFnZXInO1xyXG5cclxuaW1wb3J0IEF1ZGlvTWFuYWdlciBmcm9tICcuL0F1ZGlvTWFuYWdlcic7XHJcblxyXG5pbXBvcnQgRXhwZXJpZW5jZU1hbmFnZXIgZnJvbSAnLi9FeHBlcmllbmNlTWFuYWdlcic7XHJcblxyXG4vKiBVVElMUyAqL1xyXG5pbXBvcnQgRGV2aWNlIGZyb20gJy4vdXRpbHMvRGV2aWNlJztcclxuaW1wb3J0IHsgaXNPYmplY3RMaWtlIH0gZnJvbSAnLi91dGlscy9oZWxwZXJzJztcclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vIHR5cGVkZWZzIGZvciBqZG9jXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4qIEB0eXBlZGVmIHtPYmplY3R9IEdlb0NmZ1xyXG4qIEBwcm9wZXJ0eSB7IE9iamVjdFtdIH0gcG9zaXRpb25zIC0gR2VvIHBvc2l0aW9uc1xyXG4qIEBwcm9wZXJ0eSB7IHN0cmluZyB9IHBvc2l0aW9uc1tdLmlkIC0gUG9zaXRpb24gaWRcclxuKiBAcHJvcGVydHkgeyBzdHJpbmcgfSBwb3NpdGlvbnNbXS5sYWJlbCAtIFBvc2l0aW9uIG5hbWUvZGVzY1xyXG4qIEBwcm9wZXJ0eSB7IG51bWJlciB9IHBvc2l0aW9uc1tdLmxhdCAtIFBvc2l0aW9uIGxhdGl0dWRlIFtkZWdyZWVzIE5vcnRoXVxyXG4qIEBwcm9wZXJ0eSB7IG51bWJlciB9IHBvc2l0aW9uc1tdLmxvbiAtIFBvc2l0aW9uIGxvbmdpdHVkZSBbZGVncmVlcyBFYXN0XVxyXG4qIEBwcm9wZXJ0eSB7IG51bWJlciB9IHBvc2l0aW9uc1tdLnJhZGl1cyAtIFBvc2l0aW9uIGlubmVyIHJhZGl1cyBbbWV0ZXJzXVxyXG4qIEBwcm9wZXJ0eSB7IG51bWJlciB9IHBvc2l0aW9uc1tdLmRlYWRiYW5kIC0gUG9zaXRpb24gZGVhZGJhbmQgZnJvbSBpbm5lciByYWRpdXMgW21ldGVyc11cclxuKiBAcHJvcGVydHkgeyBudW1iZXIgfSBwb3NpdGlvbnNbXS5mZXRjaCAtIFJhZGl1cyBmb3IgY29udGVudCBwcmVmZXRjaGluZyBbcmF0ZSBvZiByYWRpdXNdXHJcbiogQHByb3BlcnR5IHsgT2JqZWN0IH0gb3B0aW9ucyAtIEdlbyBvcHRpb25zXHJcbiogQHByb3BlcnR5IHsgbnVtYmVyIH0gb3B0aW9ucy5hY2N1cmFjeSAtIE1pbiBhY2NlcHRhYmxlIGFjY3VyYWN5IFttZXRlcnNdXHJcbiogQHByb3BlcnR5IHsgbnVtYmVyIH0gb3B0aW9ucy5kZWZhdWx0RGVhZGJhbmQgLSBEZWZhdWx0IGRlYWRiYW5kIFttZXRlcnNdXHJcbiogQHByb3BlcnR5IHsgbnVtYmVyIH0gb3B0aW9ucy5kZWZhdWx0UmFkaXVzIC0gRGVmYXVsdCBwb3NpdGlvbiByYWRpdXMgW21ldGVyc11cclxuKiBAcHJvcGVydHkgeyBudW1iZXIgfSBvcHRpb25zLmRlZmF1bHRGZXRjaCAtIERlZmF1bHQgcHJlZmV0Y2ggZGlzdGFuY2UgW21ldGVyc11cclxuKi9cclxuXHJcbi8qKlxyXG4qIEB0eXBlZGVmIHtPYmplY3R9IEF1ZGlvQ2ZnXHJcbiogQHByb3BlcnR5IHsgT2JqZWN0W10gfSBzb3VuZHMgLSBBdWRpbyBzb3VuZHNcclxuKiBAcHJvcGVydHkgeyBzdHJpbmcgfSBzb3VuZHNbXS5pZCAtIFNvdW5kIGlkXHJcbiogQHByb3BlcnR5IHsgc3RyaW5nIH0gc291bmRzW10ubGFiZWwgLSBTb3VuZCBuYW1lL2Rlc2NcclxuKiBAcHJvcGVydHkgeyBzdHJpbmcgfSBzb3VuZHNbXS51cmwgLSBTb3VuZCB1cmwsIGxvY2FsIG9yIHJlbW90ZVxyXG4qIEBwcm9wZXJ0eSB7IE9iamVjdCB9IG9wdGlvbnMgLSBBdWRpbyBvcHRpb25zXHJcbiogQHByb3BlcnR5IHsgc3RyaW5nIH0gb3B0aW9ucy50ZXN0IC0gVGVzdCBzb3VuZCB1cmxcclxuKiBAcHJvcGVydHkgeyBzdHJpbmcgfSBvcHRpb25zLnNpbGVuY2UgLSBTaWxlbmNlIHNvdW5kIHVybFxyXG4qIEBwcm9wZXJ0eSB7IHN0cmluZyB9IG9wdGlvbnMudmlzaXRlZCAtIFZpc2l0ZWQgc3BvdCBhdWRpbyB1cmxcclxuKiBAcHJvcGVydHkgeyBzdHJpbmcgfSBvcHRpb25zLmZhZGVJblRpbWUgLSBmYWRlIHRpbWUgYWZ0ZXIgcGxheSBbbXNdXHJcbiogQHByb3BlcnR5IHsgc3RyaW5nIH0gb3B0aW9ucy5mYWRlT3V0VGltZSAtIGZhZGUgdGltZSBiZWZvcmUgc3RvcCBbbXNdXHJcbiovXHJcblxyXG4vKipcclxuKiBAdHlwZWRlZiB7T2JqZWN0fSBFeHBlcmllbmNlQ2ZnXHJcbiogQHByb3BlcnR5IHsgc3RyaW5nIH0gcGF0dGVybnNbXS5pZCAtIFBhdHRlcm4gaWRcclxuKiBAcHJvcGVydHkgeyBzdHJpbmcgfSBwYXR0ZXJuc1tdLmxhYmVsIC0gUGF0dGVybiBuYW1lL2Rlc2NcclxuKiBAcHJvcGVydHkgeyBib29sZWFuIH0gW3BhdHRlcm5zW10uZGlzYWJsZWQgPSBudWxsXSAtIFBhdHRlcm4gaXMgZGlzYWJsZWRcclxuKiBAcHJvcGVydHkgeyBib29sZWFuIH0gW3BhdHRlcm5zW10ucmVwbGF5ID0gbnVsbF0gLSBQYXR0ZXJuIHNwb3RzIGFyZSByZXBsYXllZCBieSBkZWZhdWx0XHJcbiogQHByb3BlcnR5IHsgYm9vbGVhbiB9IFtwYXR0ZXJuc1tdLm92ZXJsYXAgPSBudWxsXSAtIFBhdHRlcm4gc3BvdHMgY2FuIG92ZXJsYXAgKG1vcmUgdGhhbiBvbmUgY2FuIGJlIGFjdGl2ZSBhdCB0aGUgc2FtZSB0aW1lKVxyXG4qIEBwcm9wZXJ0eSB7IE9iamVjdFtdIH0gcGF0dGVybnNbXS5zcG90cyAtIFBhdHRlcm4gc3BvdHNcclxuKiBAcHJvcGVydHkgeyBzdHJpbmcgfSBwYXR0ZXJuc1tdLnNwb3RzW10uaWQgLSBTcG90IGlkXHJcbiogQHByb3BlcnR5IHsgc3RyaW5nIH0gcGF0dGVybnNbXS5zcG90c1tdLnBvc2l0aW9uIC0gU3BvdCBsaW5rZWQgcG9zaXRpb24gaWRcclxuKiBAcHJvcGVydHkgeyBzdHJpbmcgfSBwYXR0ZXJuc1tdLnNwb3RzW10uYXVkaW8gLSBTcG90IGxpbmtlZCBhdWRpbyBpZFxyXG4qIEBwcm9wZXJ0eSB7IHN0cmluZyB9IFtwYXR0ZXJuc1tdLnNwb3RzW10uYWZ0ZXIgPSBudWxsXSAtIFNwb3QgY2FuIGdvIGFjdGl2ZSBvbmx5IGFmdGVyIHRoaXMgc3BvdCBpZCBoYXMgYmVlbiB2aXNpdGVkXHJcbiogQHByb3BlcnR5IHsgc3RyaW5nIH0gW3BhdHRlcm5zW10uc3BvdHNbXS5ub3RBZnRlciA9IG51bGxdIC0gU3BvdCBjYW5ub3QgZ28gYWN0aXZlIGFmdGVyIHRoaXMgc3BvdCBpZCBoYXMgYmVlbiB2aXNpdGVkXHJcbiogQHByb3BlcnR5IHsgYm9vbGVhbiB9IFtwYXR0ZXJuc1tdLnNwb3RzW10ubGFzdCA9IG51bGxdIC0gTWFya3MgbGFzdCBzcG90IGluIHBhdHRlcm5cclxuKiBAcHJvcGVydHkgeyBPYmplY3QgfSBvcHRpb25zIC0gRXhwZXJpZW5jZSBvcHRpb25zXHJcbiogQHByb3BlcnR5IHsgbnVtYmVyIH0gb3B0aW9ucy52aXNpdGVkRmlsdGVyIC0gVGltZSBiZWZvcmUgdmlzaXN0ZWQgc3BvdCBpcyBub3RpZmllZCBmb3IgZmlsdGVyaW5nIFtzZWNvbmRzXVxyXG4qIEBwcm9wZXJ0eSB7IE9iamVjdHxib29sZWFuIH0gW29wdGlvbnMuY29va2llcyA9IG51bGxdIC0gUGF0dGVybiBcIlZpc2l0ZWQgc3BvdHNcIiBjb29raWVzLiBTZXQgdG8gdHJ1ZSB0byB1c2UgZGVmYXVsdCBvcHRpb25zLiBVc2UgYW4gb2JqZWN0IGZvciBjdXN0b20gdmFsdWVzLlxyXG4qIEBwcm9wZXJ0eSB7IGJvb2xlYW4gfSBbb3B0aW9ucy5jb29raWVzLmRlbGV0ZU9uTGFzdFNwb3QgPSBudWxsXSAtIFZpc2l0ZWQgc3BvdCBjb29raWUgaXMgZGVsZXRlZCB3aGVuIFwibGFzdFwiIHNwb3QgaXMgdmlzaXRlZFxyXG4qIEBwcm9wZXJ0eSB7IGJvb2xlYW4gfSBbb3B0aW9ucy5jb29raWVzLmRlbGV0ZU9uQ29tcGxldGlvbiA9IHRydWVdIC0gVmlzaXRlZCBzcG90IGNvb2tpZSBpcyBkZWxldGVkIGFsbCBwYXR0ZXJuIHNwb3RzIGhhdmUgYmVlbiB2aXNpdGVkLiBPdmVycmlkZXMgZGVsZXRlT25MYXN0U3BvdFxyXG4qIEBwcm9wZXJ0eSB7IG51bWJlciB9IFtvcHRpb25zLmNvb2tpZXMuZXhwaXJhdGlvbiA9IDVdIC0gVmlzaXRlZCBzcG90IGNvb2tpZSBleHBpcmF0aW9uIFttaW5dXHJcbiovXHJcblxyXG4vKipcclxuKiBAdHlwZWRlZiB7T2JqZWN0fSBTcG90XHJcbiogQHByb3BlcnR5IHsgc3RyaW5nIH0gaWQgLSBTcG90IGlkXHJcbiogQHByb3BlcnR5IHsgc3RyaW5nIH0gbGFiZWwgLSBTcG90IG5hbWUvZGVzY1xyXG4qIEBwcm9wZXJ0eSB7IHN0cmluZyB9IHBvc2l0aW9uIC0gU3BvdCBsaW5rZWQgcG9zaXRpb24gaWRcclxuKiBAcHJvcGVydHkgeyBzdHJpbmcgfSBhdWRpbyAtIFNwb3QgbGlua2VkIGF1ZGlvIGlkXHJcbiogQHByb3BlcnR5IHsgc3RyaW5nIH0gW2FmdGVyID0gbnVsbF0gLSBTcG90IGNhbiBnbyBhY3RpdmUgb25seSBhZnRlciB0aGlzIHNwb3QgaWQgaGFzIGJlZW4gdmlzaXRlZFxyXG4qIEBwcm9wZXJ0eSB7IHN0cmluZyB9IFtub3RBZnRlciA9IG51bGxdIC0gU3BvdCBjYW5ub3QgZ28gYWN0aXZlIGFmdGVyIHRoaXMgc3BvdCBpZCBoYXMgYmVlbiB2aXNpdGVkXHJcbiogQHByb3BlcnR5IHsgYm9vbGVhbiB9IFtsYXN0ID0gbnVsbF0gLSBNYXJrcyBsYXN0IHNwb3QgaW4gcGF0dGVyblxyXG4qL1xyXG5cclxuLyoqXHJcbiogQHR5cGVkZWYge09iamVjdH0gQXVkaW9cclxuKiBAcHJvcGVydHkgeyBzdHJpbmcgfSBpZCAtIEF1ZGlvIGlkXHJcbiogQHByb3BlcnR5IHsgYm9vbGVhbiB9IG92ZXJsYXAgLSBBdWRpbyBjYW4gb3ZlcmxhcCB3aXRoIG90aGVycyB5ZXQgcGxheWluZ1xyXG4qIEBwcm9wZXJ0eSB7IGJvb2xlYW4gfSBwbGF5V2hlblJlYWR5IC0gQXVkaW8gaXMgdG8gYmUgcGxheWVkIGltbWVkaWF0ZWx5IHdoZW4gbG9hZGVkXHJcbiogQHByb3BlcnR5IHsgU3BvdCB9IHNwb3QgLSBTcG90IHRoYXQgb3ducyB0aGlzIGF1ZGlvIGNvbnRlbnRcclxuKiBAcHJvcGVydHkgeyBPYmplY3QgfSBhdWRpbyAtIEF1ZGlvIGluc3RhbmNlIGFzIFtIb3dsZXIuSG93bF0ge0BsaW5rIGh0dHBzOi8vcHViLmRldi9kb2N1bWVudGF0aW9uL2hvd2xlci9sYXRlc3QvaG93bGVyL0hvd2wtY2xhc3MuaHRtbH1cclxuKi9cclxuXHJcbi8qKlxyXG4qIHBsYXkgfCBlbmQgZXZlbnQgbGlzdGVuZXJcclxuKiBAY2FsbGJhY2sgYXVkaW9MaXN0ZW5lclxyXG4qIEBwYXJhbSB7IEF1ZGlvIH0gYXVkaW9cclxuKi9cclxuXHJcbi8qKlxyXG4qIGluY29taW5nIHwgYWN0aXZlIHwgdmlzaXRlZCB8IG91Z29pbmcgZXZlbnQgbGlzdGVuZXJcclxuKiBAY2FsbGJhY2sgc3BvdExpc3RlbmVyXHJcbiogQHBhcmFtIHsgU3BvdCB9IHNwb3RcclxuKi9cclxuXHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vIGdlb1hwIGNsYXNzXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbi8qKlxyXG4qIENyZWF0ZXMgR2VvWHAgY2xhc3MuXHJcbiogR2VvWHAgbWFuYWdlcyB0aGUgTWV6em9Gb3J0ZSBHZW8gRXhwZXJpZW5jZVxyXG4qIEBwYXJhbSB7IE9iamVjdCB9IGNvbmZpZyAtIENvbmZpZyBvcHRpb25zXHJcbiogQHBhcmFtIHsgR2VvQ2ZnIH0gY29uZmlnLmdlbyAtIEdlbyBjb25maWcgb3B0aW9uc1xyXG4qIEBwYXJhbSB7IEF1ZGlvQ2ZnIH0gY29uZmlnLmF1ZGlvIC0gQXVkaW8gY29uZmlnIG9wdGlvbnNcclxuKiBAcGFyYW0geyBFeHBlcmllbmNlQ2ZnIH0gY29uZmlnLmV4cGVyaWVuY2UgLSBFeHBlcmllbmNlIGNvbmZpZyBvcHRpb25zXHJcbiogQHJldHVybnMgeyBPYmplY3QgfSBHZW9YcCBzaW5nbGV0b24gaW5zdGFuY2VcclxuKiBAY29uc3RydWN0b3JcclxuKi9cclxuY2xhc3MgR2VvWHAge1xyXG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xyXG5cclxuICAgIC8vIGNoZWNrcyBmb3IgY29uZmlnIG9iamVjdFxyXG4gICAgaWYgKCFjb25maWcgfHwgIWlzT2JqZWN0TGlrZShjb25maWcpKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tHZW9YcF0gLSBNaXNzaW5nIG9yIGludmFsaWQgY29uZmlnIG9iamVjdCEgR2VvWHAgbmVlZHMgYSBjb25maWd1cmF0aW9uIG9iamVjdCB3aGVuIGNyZWF0aW5nIGFuIGluc3RhbmNlLiBDaGVjayB0aGUgZG9jcyBmb3IgZGV0YWlscycpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFjb25maWcuZXhwZXJpZW5jZSB8fCAhaXNPYmplY3RMaWtlKGNvbmZpZy5leHBlcmllbmNlKSkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdbRXhwZXJpZW5jZU1hbmFnZXJdIC0gTWlzc2luZyBvciBpbnZhbGlkIGV4cGVyaWVuY2UgY29uZmlnISBHZW9YcCBuZWVkcyBhbiBleHBlcmllbmNlIG9iamVjdCBpbiB0aGUgY29uZmlndXJhdGlvbiBmaWxlLiBDaGVjayB0aGUgZG9jcyBmb3IgZGV0YWlscycpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFjb25maWcuZ2VvIHx8ICFpc09iamVjdExpa2UoY29uZmlnLmdlbykpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW0dlb01hbmFnZXJdIC0gTWlzc2luZyBvciBpbnZhbGlkIGdlbyBjb25maWchIEdlb1hwIG5lZWRzIGEgZ2VvIG9iamVjdCBpbiB0aGUgY29uZmlndXJhdGlvbiBmaWxlLiBDaGVjayB0aGUgZG9jcyBmb3IgZGV0YWlscycpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFjb25maWcuYXVkaW8gfHwgIWlzT2JqZWN0TGlrZShjb25maWcuYXVkaW8pKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tBdWRpb01hbmFnZXJdIC0gTWlzc2luZyBvciBpbnZhbGlkIGF1ZGlvIGNvbmZpZyEgR2VvWHAgbmVlZHMgYW4gYXVkaW8gb2JqZWN0IGluIHRoZSBjb25maWd1cmF0aW9uIGZpbGUuIENoZWNrIHRoZSBkb2NzIGZvciBkZXRhaWxzJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XHJcblxyXG4gICAgLy8gaW5zdGFudGlhdGVzIG1vZHVsZXNcclxuICAgIHRoaXMuZ2VvID0gbmV3IEdlb01hbmFnZXIoY29uZmlnLmdlbyk7XHJcbiAgICB0aGlzLmF1ZGlvID0gbmV3IEF1ZGlvTWFuYWdlcihjb25maWcuYXVkaW8pO1xyXG4gICAgdGhpcy5leHBlcmllbmNlID0gbmV3IEV4cGVyaWVuY2VNYW5hZ2VyKGNvbmZpZy5leHBlcmllbmNlKTtcclxuXHJcbiAgICAvLyBleHBvc2VzIHN0YXRpYyBjbGFzc2VzXHJcbiAgICB0aGlzLnV0aWxzID0ge1xyXG4gICAgICBkZXZpY2U6IERldmljZVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBleHBvc2VzIGV2ZW50IGVtaXR0ZXJcclxuICAgIHRoaXMuZXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIHN1YnNjcmliZXMgdG8gSW52ZW50b3J5TWFuYWdlciByZXF1ZXN0c1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gcmVxdWVzdCBmb3IgcG9zaXRpb25zIHJlZnJlc2hcclxuICAgIHRoaXMuc3ViRXhwZXJpZW5jZVJlZnJlc2ggPSB0aGlzLmV4cGVyaWVuY2UuZ2VvUmVmcmVzaCRcclxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XHJcblxyXG4gICAgICAgIC8vIHJlc2VuZCBpbnNpZGUgcG9zaXRpb25zXHJcbiAgICAgICAgdGhpcy5nZW8ucmVmcmVzaCgpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyByZXF1ZXN0IGZvciBhdWRpbyBwcmVsb2FkaW5nXHJcbiAgICB0aGlzLnN1YkV4cGVyaWVuY2VJbmNvbWluZyA9IHRoaXMuZXhwZXJpZW5jZS5zcG90SW5jb21pbmckXHJcbiAgICAgIC5zdWJzY3JpYmUoaW5mbyA9PiB7XHJcblxyXG4gICAgICAgIC8vIGxvYWQgc3BvdCBhdWRpb1xyXG4gICAgICAgIHRoaXMuYXVkaW8ubG9hZChpbmZvLnNwb3QsIGluZm8ub3ZlcmxhcCk7XHJcblxyXG4gICAgICAgIC8vIGVtaXRzIHNwb3QgaW5jb21pbmdcclxuICAgICAgICB0aGlzLmV2ZW50LmVtaXQoJ2luY29taW5nJywgaW5mby5zcG90KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gcmVxdWVzdCBmb3IgYXVkaW8gcGxheVxyXG4gICAgdGhpcy5zdWJFeHBlcmllbmNlQWN0aXZlID0gdGhpcy5leHBlcmllbmNlLnNwb3RBY3RpdmUkXHJcbiAgICAgIC5zdWJzY3JpYmUoaW5mbyA9PiB7XHJcblxyXG4gICAgICAgIC8vIHBsYXkgc3BvdCBhdWRpb1xyXG4gICAgICAgIHRoaXMuYXVkaW8ucGxheShpbmZvLnNwb3QsIGluZm8ub3ZlcmxhcCk7XHJcblxyXG4gICAgICAgIC8vIGVtaXRzIHNwb3QgYWN0aXZlXHJcbiAgICAgICAgdGhpcy5ldmVudC5lbWl0KCdhY3RpdmUnLCBpbmZvLnNwb3QpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyBhbHJlZHkgdmlzaXN0ZWQgc3BvdFxyXG4gICAgdGhpcy5zdWJFeHBlcmllbmNlVmlzaXRlZCA9IHRoaXMuZXhwZXJpZW5jZS5zcG90VmlzaXRlZCRcclxuICAgICAgLnN1YnNjcmliZShzcG90ID0+IHtcclxuXHJcbiAgICAgICAgLy8gZW1pdHMgc3BvdCB2aXNpZGVkXHJcbiAgICAgICAgdGhpcy5ldmVudC5lbWl0KCd2aXNpdGVkJywgc3BvdCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIHJlcXVlc3QgZm9yIGF1ZGlvIHN0b3BcclxuICAgIHRoaXMuc3ViRXhwZXJpZW5jZU91dGdvaW5nID0gdGhpcy5leHBlcmllbmNlLnNwb3RPdXRnb2luZyRcclxuICAgICAgLnN1YnNjcmliZShzcG90ID0+IHtcclxuXHJcbiAgICAgICAgLy8gc3RvcCBzcG90IGF1ZGlvXHJcbiAgICAgICAgdGhpcy5hdWRpby5zdG9wKHNwb3QpO1xyXG5cclxuICAgICAgICAvLyBlbWl0cyBzcG90IG91dGdvaW5nXHJcbiAgICAgICAgdGhpcy5ldmVudC5lbWl0KCdvdXRnb2luZycsIHNwb3QpO1xyXG4gICAgICB9KTtcclxuXHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gc3Vic2NyaWJlcyB0byBHZW9NYW5hZ2VyIHBvc2l0aW9uIHVwZGF0ZXNcclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIGN1cnJlbnQgcG9zaXRpb25cclxuICAgIHRoaXMuc3ViR2VvUG9zaXRpb24gPSB0aGlzLmdlby5wb3NpdGlvbiRcclxuICAgICAgLnN1YnNjcmliZShwb3NpdGlvbiA9PiB7XHJcblxyXG4gICAgICAgIC8vIGVtaXRzIGN1cnJlbnQgcG9zaXRpb25cclxuICAgICAgICB0aGlzLmV2ZW50LmVtaXQoJ3Bvc2l0aW9uJywgcG9zaXRpb24pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyBpbmNvbWluZyBzcG90c1xyXG4gICAgdGhpcy5zdWJHZW9JbmNvbWluZyA9IHRoaXMuZ2VvLmluY29taW5nJFxyXG4gICAgICAuc3Vic2NyaWJlKHBvc2l0aW9uID0+IHtcclxuXHJcbiAgICAgICAgLy8gc2VuZHMgdG8gZXhwZXJpZW5jZU1hbmFnZXIgZm9yIHByb2Nlc3NpbmdcclxuICAgICAgICB0aGlzLmV4cGVyaWVuY2UuaW5jb21pbmcocG9zaXRpb24pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyBpbnNpZGUgc3BvdHNcclxuICAgIHRoaXMuc3ViR2VvSW5zaWRlID0gdGhpcy5nZW8uaW5zaWRlJFxyXG4gICAgICAuc3Vic2NyaWJlKHBvc2l0aW9uID0+IHtcclxuXHJcbiAgICAgICAgLy8gaWYgZm9yY2VkLCBkbyBub3Qgbm90aWZ5IHBvc2l0aW9uXHJcbiAgICAgICAgaWYgKHRoaXMuZXhwZXJpZW5jZS5mb3JjZWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy8gc2VuZHMgdG8gZXhwZXJpZW5jZU1hbmFnZXIgZm9yIHByb2Nlc3NpbmdcclxuICAgICAgICB0aGlzLmV4cGVyaWVuY2UuaW5zaWRlKHBvc2l0aW9uKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gb3V0Z29pbmcgc3BvdFxyXG4gICAgdGhpcy5zdWJHZW9PdXRnb2luZyA9IHRoaXMuZ2VvLm91dGdvaW5nJFxyXG4gICAgICAuc3Vic2NyaWJlKHBvc2l0aW9uID0+IHtcclxuXHJcbiAgICAgICAgLy8gc2VuZHMgdG8gZXhwZXJpZW5jZU1hbmFnZXIgZm9yIHByb2Nlc3NpbmdcclxuICAgICAgICB0aGlzLmV4cGVyaWVuY2Uub3V0Z29pbmcocG9zaXRpb24pO1xyXG4gICAgICB9KTtcclxuXHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gc3Vic2NyaWJlcyB0byBBdWRpb01hbmFnZXIgZXZlbnRzXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyBzb3VuZCBwbGF5aW5nXHJcbiAgICB0aGlzLnN1YkF1ZGlvUGxheSA9IHRoaXMuYXVkaW8ucGxheSRcclxuICAgICAgLnN1YnNjcmliZShhdWRpbyA9PiB7XHJcblxyXG4gICAgICAgIC8vIHNlbmRzIHRvIGV4cGVyaWVuY2VNYW5hZ2VyIGZvciBwcm9jZXNzaW5nXHJcbiAgICAgICAgdGhpcy5leHBlcmllbmNlLnBsYXlpbmcoYXVkaW8uc3BvdCk7XHJcblxyXG4gICAgICAgIC8vIGVtaXRzIHBsYXlpbmcgYXVkaW9cclxuICAgICAgICB0aGlzLmV2ZW50LmVtaXQoJ3BsYXknLCBhdWRpbyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIC8vIHNvdW5kIGZpbmlzaGVkXHJcbiAgICB0aGlzLnN1YkF1ZGlvRG9uZSA9IHRoaXMuYXVkaW8uZG9uZSRcclxuICAgICAgLnN1YnNjcmliZShhdWRpbyA9PiB7XHJcblxyXG4gICAgICAgIC8vIHNlbmRzIHRvIGV4cGVyaWVuY2VNYW5hZ2VyIGZvciBwcm9jZXNzaW5nXHJcbiAgICAgICAgY29uc3QgcmVtb3ZlRm9yY2UgPSB0aGlzLmV4cGVyaWVuY2UuZW5kKGF1ZGlvLnNwb3QpO1xyXG5cclxuICAgICAgICAvLyByZW1vdmVzIGZvcmNpbmdcclxuICAgICAgICBpZiAocmVtb3ZlRm9yY2UpIHtcclxuICAgICAgICAgIHRoaXMucmVtb3ZlRm9yY2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGVtaXRzIHN0b3BwZWQgYXVkaW9cclxuICAgICAgICB0aGlzLmV2ZW50LmVtaXQoJ3N0b3AnLCBhdWRpbyk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBVbmxvY2sgbWV0aG9kIGZvcmNlcyBnZW9sb2NhdGlvbiBhcGkgYW5kIGhvd2xlciBqcyBhY3RpdmF0aW9uLlxyXG4gICogVGhpcyBpcyBuZWVkZWQgaW4gbW9iaWxlIGludGVncmF0aW9uLCB0byBhdm9pZCBicm93c2VyIGxvY2tpbmcgdGhlIGZ1bmN0aW9uYWxpdGllcyB3aGVuIGFwcCBnb2VzIGJhY2tncm91bmRcclxuICAqICoqSU1QT1JUQU5UIC0gY2FsbCB0aGlzIG1ldGhvZCB3aXRoaW4gYSB1c2VyIGFjdGlvbiwgc3VjaCBhcyBhIGNsaWNrIGxpc3RlbmVyISoqXHJcbiAgKi9cclxuICB1bmxvY2soKSB7XHJcbiAgICB0aGlzLmdlby51bmxvY2soKTtcclxuICAgIHRoaXMuYXVkaW8udW5sb2NrKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEVuYWJsZXMvZGlzYWJsZXMgZGVmYWx1dCBpbnRlcm5hbCBnZW9sb2NhdGlvbiBzeXN0ZW0gW0dlb2xvY2F0aW9uIEFQSV17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvaXQvZG9jcy9XZWIvQVBJL0dlb2xvY2F0aW9ufS5cclxuICAqIEluIGNhc2UgeW91IGhhdmUgYW4gZXh0ZXJuYWwgZ2VvbG9jYXRpb24gc3lzdGVtLCB5b3UgbWF5IHdhbnQgdG8gZGlzYWJsZSB0aGlzIGNhbGxpbmcgYGludGVybmFsR2VvbG9jYXRpb24oZmFsc2UpYCBhbmQgdXBkYXRlIHRoZSBwb3NpdGlvbiB3aXRoIHRoZSBgdXBkYXRlR2VvbG9jYXRpb25gIG1ldGhvZC5cclxuICAqIEBwYXJhbSB7IGJvb2xlYW4gfSBlbmFibGVkIC0gZW5hYmxlIG9yIGRpc2FibGVcclxuICAqL1xyXG4gIGludGVybmFsR2VvbG9jYXRpb24oZW5hYmxlZCkge1xyXG4gICAgdGhpcy5nZW8uaW50ZXJuYWxHZW9sb2NhdGlvbihlbmFibGVkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogUHJvdmlkZXMgZXh0ZXJuYWwgZ2VvbG9jYXRpb24gdXBkYXRlcyAoaW4gY2FzZSBnZW9sb2NhdGlvbiBBUEkgaXNu4oCZdCBhdmFpbGFibGUgYW5kL29yIHlvdSB3YW50IHRvIHVzZSBhbiBleHRlcm5hbCBHZW9sb2NhdGlvbiBzeXN0ZW0pLlxyXG4gICogQ2FuIGFsc28gYmUgdXNlZCBmb3IgZGV2ZWxvcG1lbnQgcHVycG9zZXMsIHRvIHNpbXVsYXRlIHVzZXIgbG9jYXRpb25cclxuICAqIEBwYXJhbSB7IE9iamVjdCB9IHBvc2l0aW9uIC0gcG9zaXRpb24gZGF0YSBpbiBbR2VvbG9jYXRpb24gQVBJIHBvc2l0aW9uIGZvcm1hdF17QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0dlb2xvY2F0aW9uUG9zaXRpb259XHJcbiAgKi9cclxuICB1cGRhdGVHZW9sb2NhdGlvbihwb3NpdGlvbikge1xyXG4gICAgdGhpcy5nZW8uX2dlb1N1Y2Nlc3MocG9zaXRpb24pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBFbmFibGVzIGEgY29uZmlndXJlZCBleHBlcmllbmNlIHBhdHRlcm5cclxuICAqIEBwYXJhbSB7IHN0cmluZyB9IGlkIC0gcGF0dGVybiBpZCB0byBlbmFibGVcclxuICAqL1xyXG4gIGVuYWJsZVBhdHRlcm4oaWQpIHtcclxuICAgIHRoaXMuZXhwZXJpZW5jZS5lbmFibGVQYXR0ZXJuKGlkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogRGlzYWJsZXMgYSBjb25maWd1cmVkIGV4cGVyaWVuY2UgcGF0dGVyblxyXG4gICogQHBhcmFtIHsgc3RyaW5nIH0gaWQgLSBwYXR0ZXJuIGlkIHRvIGRpc2FibGVcclxuICAqL1xyXG4gIGRpc2FibGVQYXR0ZXJuKGlkKSB7XHJcbiAgICB0aGlzLmV4cGVyaWVuY2UuZGlzYWJsZVBhdHRlcm4oaWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBSZXR1cm5zIHRydWUgaWYgaGFzIGFjdGl2ZSBzcG90c1xyXG4gICogQHJldHVybnMgeyBib29sZWFuIH0gU29tZSBzcG90cyBhcmUgYWN0aXZlXHJcbiAgKi9cclxuICBoYXNBY3RpdmVTcG90cygpIHtcclxuICAgIHJldHVybiB0aGlzLmV4cGVyaWVuY2UuaGFzQWN0aXZlU3BvdHMoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogR2V0cyB2aXNpdGVkIHNwb3RzIGZvciBhIGdpdmVuIHBhdHRlcm5cclxuICAqIEBwYXJhbSB7IHN0cmluZyB9IGlkIC0gcGF0dGVybiBpZFxyXG4gICogQHJldHVybnMgeyBzdHJpbmdbXSB9IGFycmF5IG9mIHZpc2l0ZWQgc3BvdHNcclxuICAqL1xyXG4gIGdldFZpc2l0ZWRTcG90cyhpZCkge1xyXG4gICAgcmV0dXJuIHRoaXMuZXhwZXJpZW5jZS5nZXRWaXNpdGVkU3BvdHMoaWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBSZXR1cm5zIHNwb3QgYnkgaWRcclxuICAqIEBwYXJhbSB7IHN0cmluZyB9IGlkIC0gaWQgb2Ygc3BvdCB0byBmaW5kXHJcbiAgKiBAcmV0dXJucyB7IFNwb3QgfCBudWxsIH0gU3BvdCBmb3VuZCBvciBudWxsXHJcbiAgKi9cclxuICBnZXRTcG90KGlkKSB7XHJcbiAgICByZXR1cm4gdGhpcy5leHBlcmllbmNlLmdldFNwb3QoaWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBNYXJrcyBzcG90cyBhcyB1bnZpc2l0ZWQuXHJcbiAgKiBJZiBubyBzcG90IGlkIHByb3ZpZGVkLCBtYXJrcyBhbGwgaW5zaWRlIHNwb3RzIGFzIHVudmlzaXRlZFxyXG4gICogQHBhcmFtIHsgc3RyaW5nIH0gW2lkID0gbnVsbF0gLSBpZCBvZiBzcG90IHRvIHVudmlzaXRcclxuICAqL1xyXG4gIHJlcGxheVNwb3QoaWQgPSBudWxsKSB7XHJcbiAgICB0aGlzLmV4cGVyaWVuY2UucmVwbGF5U3BvdChpZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIENoZWNrcyBpZiBtYW51YWwgbW9kZSBpcyBhdmFpbGFibGUuXHJcbiAgKiBSdWxlcyBhcmU6XHJcbiAgKiBZb3VyIGdwcyBhY2N1cmFjeSBpcyByZWFsbHkgYmFkXHJcbiAgKiBZb3UgYXJlIG5vdCB0b28gZmFyIGF3YXlcclxuICAqIEBwYXJhbSB7IHN0cmluZyB9IGlkIC0gaWQgb2Ygc3BvdCB0byBmb3JjZVxyXG4gICogQHJldHVybnMgeyBib29sZWFuIH0gU3BvdCBmb3JjZSBpcyBhdmFpbGFibGVcclxuICAqICovXHJcbiAgY2FuRm9yY2VTcG90KGlkKSB7XHJcblxyXG4gICAgLy8gY2hlY2tzIGlmIGNhbiBmb3JjZSBjdXJyZW50IHNwb3QgYmFzZWQgb24gaXRzIHBvc2l0aW9uXHJcbiAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZXhwZXJpZW5jZS5nZXRTcG90KGlkKS5wb3NpdGlvbjtcclxuICAgIHJldHVybiB0aGlzLmdlby5jYW5Gb3JjZVNwb3QocG9zaXRpb24pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBGb3JjZXMgc3BvdCBhY3RpdmF0aW9uIChtYW51YWwgbW9kZSlcclxuICAqIEZvcmNlcyBvdGhlciBzcG90cyBkZWFjdGl2YXRpb24gdW5sZXNzIG92ZXJsYXBwaW5nXHJcbiAgKiBSdWxlcyBhcmVcclxuICAqIFlvdXIgZ3BzIGFjY3VyYWN5IGlzIHJlYWxseSBiYWRcclxuICAqIFlvdSBhcmUgbm90IHRvbyBmYXIgYXdheVxyXG4gICogQHBhcmFtIHsgc3RyaW5nIH0gaWQgLSBzcG90IGlkXHJcbiAgKiAqL1xyXG4gIGZvcmNlU3BvdChpZCkge1xyXG5cclxuICAgIC8vIGNoZWNrcyBpZiBjYW4gYmUgZm9yY2VkXHJcbiAgICBpZiAoIXRoaXMuY2FuRm9yY2VTcG90KGlkKSkgcmV0dXJuO1xyXG5cclxuICAgIC8vIHN0b3BzIGludGVybmFsIGdlb2xvY2F0aW9uXHJcbiAgICB0aGlzLmdlby5pbnRlcm5hbEdlb2xvY2F0aW9uKGZhbHNlKTtcclxuXHJcbiAgICAvLyBmb3JjZXMgc3BvdFxyXG4gICAgdGhpcy5leHBlcmllbmNlLmZvcmNlU3BvdChpZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFJlbW92ZXMgdGhlIGZvcmNlZCBzcG90IGFjdGl2YXRpb25cclxuICAqICovXHJcbiAgcmVtb3ZlRm9yY2UoKSB7XHJcbiAgICB0aGlzLmV4cGVyaWVuY2UuZm9yY2VkID0gbnVsbDtcclxuICAgIHRoaXMuZ2VvLmludGVybmFsR2VvbG9jYXRpb24odHJ1ZSk7XHJcbiAgICB0aGlzLmdlby5yZWZyZXNoKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIENoZWNrcyBpZiBhbnkgc291bmQgaXMgcGxheWluZ1xyXG4gICogQHBhcmFtIHsgYm9vbGVhbiB9IFtvdmVybGFwID0gZmFsc2VdIC0gaWYgdHJ1ZSwgZXhjbHVkZXMgb3ZlcmxhcHBpbmcgYXVkaW9zXHJcbiAgKiBAcmV0dXJucyB7IGJvb2xlYW4gfSBTb3VuZHMgYXJlIHBsYXlpbmdcclxuICAqICovXHJcbiAgaGFzQXVkaW9QbGF5aW5nKG92ZXJsYXAgPSBmYWxzZSkge1xyXG4gICAgcmV0dXJuIHRoaXMuYXVkaW8uaGFzQXVkaW9QbGF5aW5nKG92ZXJsYXApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBDbGVhcnMgcGF0dGVybiBjb29raWVzLCBpZiBubyBwYXR0ZXJuIHNwZWNpZmllZCwgY2xlYXJzIGFsbFxyXG4gICogQHBhcmFtIHsgc3RyaW5nIH0gW2lkID0gbnVsbF0gLSBpZCBvZiBwYXR0ZXJuIHRvIGNsZWFyXHJcbiAgKi9cclxuICBjbGVhckNvb2tpZXMoaWQgPSBudWxsKSB7XHJcbiAgICB0aGlzLmV4cGVyaWVuY2UuY2xlYXJDb29raWVzKGlkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogTG9hZHMgYSBuZXcgY29uZmlndXJhdGlvblxyXG4gICogQHBhcmFtIHsgT2JqZWN0IH0gY29uZmlnIC0gQ29uZmlnIG9wdGlvbnNcclxuICAqIEBwYXJhbSB7IEdlb0NmZyB9IGNvbmZpZy5nZW8gLSBHZW8gY29uZmlnIG9wdGlvbnNcclxuICAqIEBwYXJhbSB7IEF1ZGlvQ2ZnIH0gY29uZmlnLmF1ZGlvIC0gQXVkaW8gY29uZmlnIG9wdGlvbnNcclxuICAqIEBwYXJhbSB7IEV4cGVyaWVuY2VDZmcgfSBjb25maWcuZXhwZXJpZW5jZSAtIEV4cGVyaWVuY2UgY29uZmlnIG9wdGlvbnNcclxuICAqL1xyXG4gIHJlbG9hZChjb25maWcpIHtcclxuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcclxuICAgIHRoaXMuZ2VvLnJlbG9hZChjb25maWcuZ2VvKTtcclxuICAgIHRoaXMuYXVkaW8ucmVsb2FkKGNvbmZpZy5hdWRpbyk7XHJcbiAgICB0aGlzLmV4cGVyaWVuY2UucmVsb2FkKGNvbmZpZy5leHBlcmllbmNlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogRGVzdHJveXMgR2VvWHAgaW5zdGFuY2VcclxuICAqL1xyXG4gIGRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLnN1YkV4cGVyaWVuY2VJbmNvbWluZy51bnN1YnNjcmliZSgpO1xyXG4gICAgdGhpcy5zdWJFeHBlcmllbmNlQWN0aXZlLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB0aGlzLnN1YkV4cGVyaWVuY2VWaXNpdGVkLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB0aGlzLnN1YkV4cGVyaWVuY2VPdXRnb2luZy51bnN1YnNjcmliZSgpO1xyXG4gICAgdGhpcy5zdWJFeHBlcmllbmNlUmVmcmVzaC51bnN1YnNjcmliZSgpO1xyXG4gICAgdGhpcy5zdWJBdWRpb0RvbmUudW5zdWJzY3JpYmUoKTtcclxuICAgIHRoaXMuc3ViQXVkaW9QbGF5LnVuc3Vic2NyaWJlKCk7XHJcbiAgICB0aGlzLnN1Ykdlb1Bvc2l0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB0aGlzLnN1Ykdlb0luc2lkZS51bnN1YnNjcmliZSgpO1xyXG4gICAgdGhpcy5zdWJHZW9PdXRnb2luZy51bnN1YnNjcmliZSgpO1xyXG4gICAgdGhpcy5zdWJHZW9JbmNvbWluZy51bnN1YnNjcmliZSgpO1xyXG5cclxuICAgIHRoaXMuZ2VvLnVubG9hZCgpO1xyXG4gICAgdGhpcy5hdWRpby51bmxvYWQoKTtcclxuICAgIHRoaXMuZXhwZXJpZW5jZS51bmxvYWQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogRXZlbnQgd3JhcHBlciBvblxyXG4gICogQHBhcmFtIHsgc3RyaW5nIH0gZXZlbnROYW1lIC0gJ2luY29taW5nJywgJ2FjdGl2ZScsICd2aXNpdGVkJywgJ291dGdvaW5nJywgJ3Bvc2l0aW9uJywgJ3BsYXknLCAnZW5kJ1xyXG4gICogQHBhcmFtIHsgc3BvdExpc3RlbmVyIHwgYXVkaW9MaXN0ZW5lciB9IGxpc3RlbmVyIC0gbGlzdGVuZXJcclxuICAqL1xyXG4gIG9uKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcclxuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignW0dlb1hwIEV2ZW50RW1pdHRlciAtIG9uXSBsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZXZlbnQub24oZXZlbnROYW1lLCBsaXN0ZW5lcik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEV2ZW50IHdyYXBwZXIgb25jZVxyXG4gICogQHBhcmFtIHsgc3RyaW5nIH0gZXZlbnROYW1lIC0gJ2luY29taW5nJywgJ2FjdGl2ZScsICd2aXNpdGVkJywgJ291dGdvaW5nJywgJ3Bvc2l0aW9uJywgJ3BsYXknLCAnZW5kJ1xyXG4gICogQHBhcmFtIHsgc3BvdExpc3RlbmVyIHwgYXVkaW9MaXN0ZW5lciB9IGxpc3RlbmVyIC0gbGlzdGVuZXJcclxuICAqL1xyXG4gIG9uY2UoZXZlbnROYW1lLCBsaXN0ZW5lcikge1xyXG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdbR2VvWHAgRXZlbnRFbWl0dGVyIC0gb25dIGxpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ldmVudC5vbmNlKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBFdmVudCB3cmFwcGVyIG9mZlxyXG4gICogQHBhcmFtIHsgc3RyaW5nIH0gZXZlbnROYW1lIC0gJ2luY29taW5nJywgJ2FjdGl2ZScsICd2aXNpdGVkJywgJ291dGdvaW5nJywgJ3Bvc2l0aW9uJywgJ3BsYXknLCAnZW5kJ1xyXG4gICogQHBhcmFtIHsgc3BvdExpc3RlbmVyIHwgYXVkaW9MaXN0ZW5lciB9IGxpc3RlbmVyIC0gbGlzdGVuZXJcclxuICAqL1xyXG4gIG9mZihldmVudE5hbWUsIGxpc3RlbmVyKSB7XHJcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1tHZW9YcCBFdmVudEVtaXR0ZXIgLSBvbl0gbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmV2ZW50Lm9mZihldmVudE5hbWUsIGxpc3RlbmVyKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdlb1hwOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/utils/Device.js":
/*!*****************************!*\
  !*** ./src/utils/Device.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => /* binding */ Device\n/* harmony export */ });\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bowser */ \"./node_modules/bowser/es5.js\");\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bowser__WEBPACK_IMPORTED_MODULE_0__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n/**\r\n * Device static class.\r\n * Device holds all the device interaction and configuration\r\n * @returns { Object } - GeoManager instance\r\n */\n\nvar Device = /*#__PURE__*/function () {\n  function Device() {\n    _classCallCheck(this, Device);\n  }\n\n  _createClass(Device, null, [{\n    key: \"webaudio\",\n    value:\n    /**\r\n    * Device supports webaudio API\r\n    */\n    function webaudio() {\n      return Boolean(window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.oAudioContext || window.msAudioContext);\n    }\n    /**\r\n    * Device supports geolocation API\r\n    */\n\n  }, {\n    key: \"geolocation\",\n    value: function geolocation() {\n      return Boolean(\"geolocation\" in navigator);\n    }\n    /**\r\n    * Device supports geolocation and webaudio APIs\r\n    */\n\n  }, {\n    key: \"isSupported\",\n    value: function isSupported() {\n      return this.webaudio() && this.geolocation();\n    }\n    /**\r\n    * Returns default geolocation options\r\n    */\n\n  }, {\n    key: \"geolocationOpts\",\n    get: function get() {\n      var geolocationOpts = {\n        enableHighAccuracy: false,\n        maximumAge: 30000,\n        timeout: 27000\n      };\n      return geolocationOpts;\n    }\n    /**\r\n    * Device has touchscreen\r\n    */\n\n  }, {\n    key: \"isTouch\",\n    value: function isTouch() {// TODO\n    }\n    /**\r\n    * Device is Mobile\r\n    */\n\n  }, {\n    key: \"isMobile\",\n    value: function isMobile() {\n      var browser = bowser__WEBPACK_IMPORTED_MODULE_0___default().getParser(window.navigator.userAgent);\n      return browser.getPlatformType() === 'mobile';\n    }\n    /**\r\n    * Device is desktop\r\n    */\n\n  }, {\n    key: \"isDesktop\",\n    value: function isDesktop() {\n      var browser = bowser__WEBPACK_IMPORTED_MODULE_0___default().getParser(window.navigator.userAgent);\n      return browser.getPlatformType() === 'desktop';\n    }\n    /**\r\n    * Using chrome browser\r\n    */\n\n  }, {\n    key: \"isChrome\",\n    value: function isChrome() {\n      var browser = bowser__WEBPACK_IMPORTED_MODULE_0___default().getParser(window.navigator.userAgent);\n      return browser.getBrowserName() === 'Chrome';\n    }\n    /**\r\n    * Using FF browser\r\n    */\n\n  }, {\n    key: \"isFF\",\n    value: function isFF() {\n      var browser = bowser__WEBPACK_IMPORTED_MODULE_0___default().getParser(window.navigator.userAgent);\n      return browser.getBrowserName() === 'Firefox';\n    }\n    /**\r\n    * Using safari browser\r\n    */\n\n  }, {\n    key: \"isSafari\",\n    value: function isSafari() {\n      var browser = bowser__WEBPACK_IMPORTED_MODULE_0___default().getParser(window.navigator.userAgent);\n      return Boolean(browser.getBrowserName() === 'Safari');\n    }\n    /**\r\n    * Using safari over IOS\r\n    */\n\n  }, {\n    key: \"isSafariiOS\",\n    value: function isSafariiOS() {\n      var browser = bowser__WEBPACK_IMPORTED_MODULE_0___default().getParser(window.navigator.userAgent);\n      return Boolean(browser.getOSName() === 'iOS' && browser.getBrowserName() === 'Safari');\n    }\n    /**\r\n    * Using facebook app\r\n    */\n\n  }, {\n    key: \"isFacebookApp\",\n    value: function isFacebookApp() {\n      var ua = navigator.userAgent || navigator.vendor || window.opera;\n      return ua.indexOf(\"FBAN\") > -1 || ua.indexOf(\"FBAV\") > -1;\n    }\n    /**\r\n    * Gets device OS\r\n    */\n\n  }, {\n    key: \"os\",\n    get: function get() {\n      var browser = bowser__WEBPACK_IMPORTED_MODULE_0___default().getParser(window.navigator.userAgent);\n      return browser.getOSName();\n    }\n    /**\r\n    * Gets current browser\r\n    */\n\n  }, {\n    key: \"browser\",\n    get: function get() {\n      var browser = bowser__WEBPACK_IMPORTED_MODULE_0___default().getParser(window.navigator.userAgent);\n      return browser.getBrowserName();\n    }\n    /**\r\n    * Gets current platform\r\n    */\n\n  }, {\n    key: \"platform\",\n    get: function get() {\n      var browser = bowser__WEBPACK_IMPORTED_MODULE_0___default().getParser(window.navigator.userAgent);\n      return browser.getPlatformType();\n    }\n  }]);\n\n  return Device;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL3NyYy91dGlscy9EZXZpY2UuanM/ZDJjNyJdLCJuYW1lcyI6WyJEZXZpY2UiLCJCb29sZWFuIiwid2luZG93IiwiQXVkaW9Db250ZXh0Iiwid2Via2l0QXVkaW9Db250ZXh0IiwibW96QXVkaW9Db250ZXh0Iiwib0F1ZGlvQ29udGV4dCIsIm1zQXVkaW9Db250ZXh0IiwibmF2aWdhdG9yIiwid2ViYXVkaW8iLCJnZW9sb2NhdGlvbiIsImdlb2xvY2F0aW9uT3B0cyIsImVuYWJsZUhpZ2hBY2N1cmFjeSIsIm1heGltdW1BZ2UiLCJ0aW1lb3V0IiwiYnJvd3NlciIsIkJvd3NlciIsInVzZXJBZ2VudCIsImdldFBsYXRmb3JtVHlwZSIsImdldEJyb3dzZXJOYW1lIiwiZ2V0T1NOYW1lIiwidWEiLCJ2ZW5kb3IiLCJvcGVyYSIsImluZGV4T2YiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7SUFDcUJBLE07Ozs7Ozs7O0FBRW5CO0FBQ0Y7QUFDQTtBQUNFLHdCQUFrQjtBQUNoQixhQUFPQyxPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsWUFBUCxJQUF1QkQsTUFBTSxDQUFDRSxrQkFBOUIsSUFDVkYsTUFBTSxDQUFDRyxlQURHLElBQ2dCSCxNQUFNLENBQUNJLGFBRHZCLElBQ3dDSixNQUFNLENBQUNLLGNBRGhELENBQWQ7QUFFRDtBQUVEO0FBQ0Y7QUFDQTs7OztXQUNFLHVCQUFxQjtBQUNuQixhQUFPTixPQUFPLENBQUMsaUJBQWlCTyxTQUFsQixDQUFkO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7Ozs7V0FDRSx1QkFBcUI7QUFDbkIsYUFBTyxLQUFLQyxRQUFMLE1BQW1CLEtBQUtDLFdBQUwsRUFBMUI7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7OztTQUNFLGVBQTZCO0FBQzNCLFVBQU1DLGVBQWUsR0FBRztBQUN0QkMsMEJBQWtCLEVBQUcsS0FEQztBQUV0QkMsa0JBQVUsRUFBVyxLQUZDO0FBR3RCQyxlQUFPLEVBQWM7QUFIQyxPQUF4QjtBQUtBLGFBQU9ILGVBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7OztXQUNFLG1CQUFpQixDQUNmO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7Ozs7V0FDRSxvQkFBa0I7QUFDaEIsVUFBTUksT0FBTyxHQUFHQyx1REFBQSxDQUFpQmQsTUFBTSxDQUFDTSxTQUFQLENBQWlCUyxTQUFsQyxDQUFoQjtBQUNBLGFBQU9GLE9BQU8sQ0FBQ0csZUFBUixPQUE4QixRQUFyQztBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7O1dBQ0UscUJBQW1CO0FBQ2pCLFVBQU1ILE9BQU8sR0FBR0MsdURBQUEsQ0FBaUJkLE1BQU0sQ0FBQ00sU0FBUCxDQUFpQlMsU0FBbEMsQ0FBaEI7QUFDQSxhQUFPRixPQUFPLENBQUNHLGVBQVIsT0FBOEIsU0FBckM7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7OztXQUNFLG9CQUFrQjtBQUNoQixVQUFNSCxPQUFPLEdBQUdDLHVEQUFBLENBQWlCZCxNQUFNLENBQUNNLFNBQVAsQ0FBaUJTLFNBQWxDLENBQWhCO0FBQ0EsYUFBT0YsT0FBTyxDQUFDSSxjQUFSLE9BQTZCLFFBQXBDO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7Ozs7V0FDRSxnQkFBYztBQUNaLFVBQU1KLE9BQU8sR0FBR0MsdURBQUEsQ0FBaUJkLE1BQU0sQ0FBQ00sU0FBUCxDQUFpQlMsU0FBbEMsQ0FBaEI7QUFDQSxhQUFPRixPQUFPLENBQUNJLGNBQVIsT0FBNkIsU0FBcEM7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7OztXQUNFLG9CQUFrQjtBQUNoQixVQUFNSixPQUFPLEdBQUdDLHVEQUFBLENBQWlCZCxNQUFNLENBQUNNLFNBQVAsQ0FBaUJTLFNBQWxDLENBQWhCO0FBQ0EsYUFBT2hCLE9BQU8sQ0FBQ2MsT0FBTyxDQUFDSSxjQUFSLE9BQTZCLFFBQTlCLENBQWQ7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7OztXQUNFLHVCQUFxQjtBQUNuQixVQUFNSixPQUFPLEdBQUdDLHVEQUFBLENBQWlCZCxNQUFNLENBQUNNLFNBQVAsQ0FBaUJTLFNBQWxDLENBQWhCO0FBQ0EsYUFBT2hCLE9BQU8sQ0FBQ2MsT0FBTyxDQUFDSyxTQUFSLE9BQXdCLEtBQXhCLElBQWlDTCxPQUFPLENBQUNJLGNBQVIsT0FBNkIsUUFBL0QsQ0FBZDtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7O1dBQ0UseUJBQXVCO0FBQ3JCLFVBQU1FLEVBQUUsR0FBR2IsU0FBUyxDQUFDUyxTQUFWLElBQXVCVCxTQUFTLENBQUNjLE1BQWpDLElBQTJDcEIsTUFBTSxDQUFDcUIsS0FBN0Q7QUFDQSxhQUFRRixFQUFFLENBQUNHLE9BQUgsQ0FBVyxNQUFYLElBQXFCLENBQUMsQ0FBdkIsSUFBOEJILEVBQUUsQ0FBQ0csT0FBSCxDQUFXLE1BQVgsSUFBcUIsQ0FBQyxDQUEzRDtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7O1NBQ0UsZUFBZ0I7QUFDZCxVQUFNVCxPQUFPLEdBQUdDLHVEQUFBLENBQWlCZCxNQUFNLENBQUNNLFNBQVAsQ0FBaUJTLFNBQWxDLENBQWhCO0FBQ0EsYUFBT0YsT0FBTyxDQUFDSyxTQUFSLEVBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7OztTQUNFLGVBQXFCO0FBQ25CLFVBQU1MLE9BQU8sR0FBR0MsdURBQUEsQ0FBaUJkLE1BQU0sQ0FBQ00sU0FBUCxDQUFpQlMsU0FBbEMsQ0FBaEI7QUFDQSxhQUFPRixPQUFPLENBQUNJLGNBQVIsRUFBUDtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7O1NBQ0UsZUFBc0I7QUFDcEIsVUFBTUosT0FBTyxHQUFHQyx1REFBQSxDQUFpQmQsTUFBTSxDQUFDTSxTQUFQLENBQWlCUyxTQUFsQyxDQUFoQjtBQUNBLGFBQU9GLE9BQU8sQ0FBQ0csZUFBUixFQUFQO0FBQ0QiLCJmaWxlIjoiLi9zcmMvdXRpbHMvRGV2aWNlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJvd3NlciBmcm9tIFwiYm93c2VyXCI7XHJcblxyXG4vKipcclxuICogRGV2aWNlIHN0YXRpYyBjbGFzcy5cclxuICogRGV2aWNlIGhvbGRzIGFsbCB0aGUgZGV2aWNlIGludGVyYWN0aW9uIGFuZCBjb25maWd1cmF0aW9uXHJcbiAqIEByZXR1cm5zIHsgT2JqZWN0IH0gLSBHZW9NYW5hZ2VyIGluc3RhbmNlXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZXZpY2Uge1xyXG5cclxuICAvKipcclxuICAqIERldmljZSBzdXBwb3J0cyB3ZWJhdWRpbyBBUElcclxuICAqL1xyXG4gIHN0YXRpYyB3ZWJhdWRpbygpIHtcclxuICAgIHJldHVybiBCb29sZWFuKHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dFxyXG4gICAgICB8fCB3aW5kb3cubW96QXVkaW9Db250ZXh0IHx8IHdpbmRvdy5vQXVkaW9Db250ZXh0IHx8IHdpbmRvdy5tc0F1ZGlvQ29udGV4dCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIERldmljZSBzdXBwb3J0cyBnZW9sb2NhdGlvbiBBUElcclxuICAqL1xyXG4gIHN0YXRpYyBnZW9sb2NhdGlvbigpIHtcclxuICAgIHJldHVybiBCb29sZWFuKFwiZ2VvbG9jYXRpb25cIiBpbiBuYXZpZ2F0b3IpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBEZXZpY2Ugc3VwcG9ydHMgZ2VvbG9jYXRpb24gYW5kIHdlYmF1ZGlvIEFQSXNcclxuICAqL1xyXG4gIHN0YXRpYyBpc1N1cHBvcnRlZCgpIHtcclxuICAgIHJldHVybiB0aGlzLndlYmF1ZGlvKCkgJiYgdGhpcy5nZW9sb2NhdGlvbigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBSZXR1cm5zIGRlZmF1bHQgZ2VvbG9jYXRpb24gb3B0aW9uc1xyXG4gICovXHJcbiAgc3RhdGljIGdldCBnZW9sb2NhdGlvbk9wdHMoKSB7XHJcbiAgICBjb25zdCBnZW9sb2NhdGlvbk9wdHMgPSB7XHJcbiAgICAgIGVuYWJsZUhpZ2hBY2N1cmFjeSA6IGZhbHNlLFxyXG4gICAgICBtYXhpbXVtQWdlICAgICAgICAgOiAzMDAwMCxcclxuICAgICAgdGltZW91dCAgICAgICAgICAgIDogMjcwMDBcclxuICAgIH07XHJcbiAgICByZXR1cm4gZ2VvbG9jYXRpb25PcHRzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBEZXZpY2UgaGFzIHRvdWNoc2NyZWVuXHJcbiAgKi9cclxuICBzdGF0aWMgaXNUb3VjaCgpIHtcclxuICAgIC8vIFRPRE9cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogRGV2aWNlIGlzIE1vYmlsZVxyXG4gICovXHJcbiAgc3RhdGljIGlzTW9iaWxlKCkge1xyXG4gICAgY29uc3QgYnJvd3NlciA9IEJvd3Nlci5nZXRQYXJzZXIod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG4gICAgcmV0dXJuIGJyb3dzZXIuZ2V0UGxhdGZvcm1UeXBlKCkgPT09ICdtb2JpbGUnO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBEZXZpY2UgaXMgZGVza3RvcFxyXG4gICovXHJcbiAgc3RhdGljIGlzRGVza3RvcCgpIHtcclxuICAgIGNvbnN0IGJyb3dzZXIgPSBCb3dzZXIuZ2V0UGFyc2VyKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcclxuICAgIHJldHVybiBicm93c2VyLmdldFBsYXRmb3JtVHlwZSgpID09PSAnZGVza3RvcCc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFVzaW5nIGNocm9tZSBicm93c2VyXHJcbiAgKi9cclxuICBzdGF0aWMgaXNDaHJvbWUoKSB7XHJcbiAgICBjb25zdCBicm93c2VyID0gQm93c2VyLmdldFBhcnNlcih3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XHJcbiAgICByZXR1cm4gYnJvd3Nlci5nZXRCcm93c2VyTmFtZSgpID09PSAnQ2hyb21lJztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogVXNpbmcgRkYgYnJvd3NlclxyXG4gICovXHJcbiAgc3RhdGljIGlzRkYoKSB7XHJcbiAgICBjb25zdCBicm93c2VyID0gQm93c2VyLmdldFBhcnNlcih3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XHJcbiAgICByZXR1cm4gYnJvd3Nlci5nZXRCcm93c2VyTmFtZSgpID09PSAnRmlyZWZveCc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFVzaW5nIHNhZmFyaSBicm93c2VyXHJcbiAgKi9cclxuICBzdGF0aWMgaXNTYWZhcmkoKSB7XHJcbiAgICBjb25zdCBicm93c2VyID0gQm93c2VyLmdldFBhcnNlcih3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XHJcbiAgICByZXR1cm4gQm9vbGVhbihicm93c2VyLmdldEJyb3dzZXJOYW1lKCkgPT09ICdTYWZhcmknKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogVXNpbmcgc2FmYXJpIG92ZXIgSU9TXHJcbiAgKi9cclxuICBzdGF0aWMgaXNTYWZhcmlpT1MoKSB7XHJcbiAgICBjb25zdCBicm93c2VyID0gQm93c2VyLmdldFBhcnNlcih3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XHJcbiAgICByZXR1cm4gQm9vbGVhbihicm93c2VyLmdldE9TTmFtZSgpID09PSAnaU9TJyAmJiBicm93c2VyLmdldEJyb3dzZXJOYW1lKCkgPT09ICdTYWZhcmknKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogVXNpbmcgZmFjZWJvb2sgYXBwXHJcbiAgKi9cclxuICBzdGF0aWMgaXNGYWNlYm9va0FwcCgpIHtcclxuICAgIGNvbnN0IHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYTtcclxuICAgIHJldHVybiAodWEuaW5kZXhPZihcIkZCQU5cIikgPiAtMSkgfHwgKHVhLmluZGV4T2YoXCJGQkFWXCIpID4gLTEpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBHZXRzIGRldmljZSBPU1xyXG4gICovXHJcbiAgc3RhdGljIGdldCBvcygpIHtcclxuICAgIGNvbnN0IGJyb3dzZXIgPSBCb3dzZXIuZ2V0UGFyc2VyKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcclxuICAgIHJldHVybiBicm93c2VyLmdldE9TTmFtZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBHZXRzIGN1cnJlbnQgYnJvd3NlclxyXG4gICovXHJcbiAgc3RhdGljIGdldCBicm93c2VyKCkge1xyXG4gICAgY29uc3QgYnJvd3NlciA9IEJvd3Nlci5nZXRQYXJzZXIod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG4gICAgcmV0dXJuIGJyb3dzZXIuZ2V0QnJvd3Nlck5hbWUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogR2V0cyBjdXJyZW50IHBsYXRmb3JtXHJcbiAgKi9cclxuICBzdGF0aWMgZ2V0IHBsYXRmb3JtKCkge1xyXG4gICAgY29uc3QgYnJvd3NlciA9IEJvd3Nlci5nZXRQYXJzZXIod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG4gICAgcmV0dXJuIGJyb3dzZXIuZ2V0UGxhdGZvcm1UeXBlKCk7XHJcbiAgfVxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utils/Device.js\n");

/***/ }),

/***/ "./src/utils/helpers.js":
/*!******************************!*\
  !*** ./src/utils/helpers.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isObjectLike\": () => /* binding */ isObjectLike,\n/* harmony export */   \"isNumber\": () => /* binding */ isNumber,\n/* harmony export */   \"isPositiveNumber\": () => /* binding */ isPositiveNumber,\n/* harmony export */   \"setCookie\": () => /* binding */ setCookie,\n/* harmony export */   \"getCookie\": () => /* binding */ getCookie,\n/* harmony export */   \"deleteCookie\": () => /* binding */ deleteCookie\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar isObjectLike = function isObjectLike(value) {\n  return value != null && _typeof(value) === 'object' && !(typeof value === 'function') && !Array.isArray(value);\n};\nvar isNumber = function isNumber(value) {\n  return typeof value == 'number';\n};\nvar isPositiveNumber = function isPositiveNumber(value) {\n  return typeof value == 'number' && value >= 0;\n};\nvar setCookie = function setCookie(name, value, duration) {\n  var exp = new Date();\n  var now = new Date();\n  exp.setTime(now.getTime() + duration * 60000);\n  document.cookie = name + '=' + escape(value) + '; expires=' + exp.toUTCString() + '; path=/';\n};\nvar getCookie = function getCookie(name) {\n  if (document.cookie.length > 0) {\n    var start = document.cookie.indexOf(name + \"=\");\n\n    if (start !== -1) {\n      start = start + name.length + 1;\n      var end = document.cookie.indexOf(\";\", start);\n\n      if (end === -1) {\n        end = document.cookie.length;\n      }\n\n      return unescape(document.cookie.substring(start, end));\n    } else {\n      return '';\n    }\n  }\n\n  return '';\n};\nvar deleteCookie = function deleteCookie(name) {\n  document.cookie = \"\".concat(name, \"= ; expires=Thu, 01 Jan 1970 00:00:00 GMT;\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL3NyYy91dGlscy9oZWxwZXJzLmpzPzJmYTMiXSwibmFtZXMiOlsiaXNPYmplY3RMaWtlIiwidmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJpc051bWJlciIsImlzUG9zaXRpdmVOdW1iZXIiLCJzZXRDb29raWUiLCJuYW1lIiwiZHVyYXRpb24iLCJleHAiLCJEYXRlIiwibm93Iiwic2V0VGltZSIsImdldFRpbWUiLCJkb2N1bWVudCIsImNvb2tpZSIsImVzY2FwZSIsInRvVVRDU3RyaW5nIiwiZ2V0Q29va2llIiwibGVuZ3RoIiwic3RhcnQiLCJpbmRleE9mIiwiZW5kIiwidW5lc2NhcGUiLCJzdWJzdHJpbmciLCJkZWxldGVDb29raWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQU8sSUFBTUEsWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBQ0MsS0FBRCxFQUFXO0FBQ3JDLFNBQ0VBLEtBQUssSUFBSSxJQUFULElBQ0EsUUFBT0EsS0FBUCxNQUFpQixRQURqQixJQUVBLEVBQUUsT0FBT0EsS0FBUCxLQUFpQixVQUFuQixDQUZBLElBR0EsQ0FBQ0MsS0FBSyxDQUFDQyxPQUFOLENBQWNGLEtBQWQsQ0FKSDtBQU1ELENBUE07QUFTQSxJQUFNRyxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFBSCxLQUFLO0FBQUEsU0FBSSxPQUFPQSxLQUFQLElBQWdCLFFBQXBCO0FBQUEsQ0FBdEI7QUFFQSxJQUFNSSxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQUFKLEtBQUs7QUFBQSxTQUFJLE9BQU9BLEtBQVAsSUFBZ0IsUUFBaEIsSUFBNEJBLEtBQUssSUFBSSxDQUF6QztBQUFBLENBQTlCO0FBRUEsSUFBTUssU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBQ0MsSUFBRCxFQUFPTixLQUFQLEVBQWNPLFFBQWQsRUFBMkI7QUFDbEQsTUFBTUMsR0FBRyxHQUFHLElBQUlDLElBQUosRUFBWjtBQUNBLE1BQU1DLEdBQUcsR0FBRyxJQUFJRCxJQUFKLEVBQVo7QUFDQUQsS0FBRyxDQUFDRyxPQUFKLENBQVlELEdBQUcsQ0FBQ0UsT0FBSixLQUFpQkwsUUFBUSxHQUFHLEtBQXhDO0FBQ0FNLFVBQVEsQ0FBQ0MsTUFBVCxHQUFrQlIsSUFBSSxHQUFHLEdBQVAsR0FBYVMsTUFBTSxDQUFDZixLQUFELENBQW5CLEdBQTZCLFlBQTdCLEdBQTRDUSxHQUFHLENBQUNRLFdBQUosRUFBNUMsR0FBZ0UsVUFBbEY7QUFDRCxDQUxNO0FBT0EsSUFBTUMsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBQ1gsSUFBRCxFQUFVO0FBQ2pDLE1BQUlPLFFBQVEsQ0FBQ0MsTUFBVCxDQUFnQkksTUFBaEIsR0FBeUIsQ0FBN0IsRUFBZ0M7QUFDOUIsUUFBSUMsS0FBSyxHQUFHTixRQUFRLENBQUNDLE1BQVQsQ0FBZ0JNLE9BQWhCLENBQXdCZCxJQUFJLEdBQUcsR0FBL0IsQ0FBWjs7QUFDQSxRQUFJYSxLQUFLLEtBQUssQ0FBQyxDQUFmLEVBQWtCO0FBQ2hCQSxXQUFLLEdBQUdBLEtBQUssR0FBR2IsSUFBSSxDQUFDWSxNQUFiLEdBQXNCLENBQTlCO0FBQ0EsVUFBSUcsR0FBRyxHQUFHUixRQUFRLENBQUNDLE1BQVQsQ0FBZ0JNLE9BQWhCLENBQXdCLEdBQXhCLEVBQTZCRCxLQUE3QixDQUFWOztBQUNBLFVBQUlFLEdBQUcsS0FBSyxDQUFDLENBQWIsRUFBZ0I7QUFDZEEsV0FBRyxHQUFHUixRQUFRLENBQUNDLE1BQVQsQ0FBZ0JJLE1BQXRCO0FBQ0Q7O0FBQ0QsYUFBT0ksUUFBUSxDQUFDVCxRQUFRLENBQUNDLE1BQVQsQ0FBZ0JTLFNBQWhCLENBQTBCSixLQUExQixFQUFpQ0UsR0FBakMsQ0FBRCxDQUFmO0FBQ0QsS0FQRCxNQU9PO0FBQ0wsYUFBTyxFQUFQO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPLEVBQVA7QUFDRCxDQWZNO0FBaUJBLElBQU1HLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQUNsQixJQUFELEVBQVU7QUFDcENPLFVBQVEsQ0FBQ0MsTUFBVCxhQUFxQlIsSUFBckI7QUFDRCxDQUZNIiwiZmlsZSI6Ii4vc3JjL3V0aWxzL2hlbHBlcnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaXNPYmplY3RMaWtlID0gKHZhbHVlKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIHZhbHVlICE9IG51bGwgJiZcclxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcclxuICAgICEodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSAmJlxyXG4gICAgIUFycmF5LmlzQXJyYXkodmFsdWUpXHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBpc051bWJlciA9IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJztcclxuXHJcbmV4cG9ydCBjb25zdCBpc1Bvc2l0aXZlTnVtYmVyID0gdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID49IDA7XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0Q29va2llID0gKG5hbWUsIHZhbHVlLCBkdXJhdGlvbikgPT4ge1xyXG4gIGNvbnN0IGV4cCA9IG5ldyBEYXRlKCk7XHJcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcclxuICBleHAuc2V0VGltZShub3cuZ2V0VGltZSgpICsgKGR1cmF0aW9uICogNjAwMDApKTtcclxuICBkb2N1bWVudC5jb29raWUgPSBuYW1lICsgJz0nICsgZXNjYXBlKHZhbHVlKSArICc7IGV4cGlyZXM9JyArIGV4cC50b1VUQ1N0cmluZygpICsgJzsgcGF0aD0vJztcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRDb29raWUgPSAobmFtZSkgPT4ge1xyXG4gIGlmIChkb2N1bWVudC5jb29raWUubGVuZ3RoID4gMCkge1xyXG4gICAgbGV0IHN0YXJ0ID0gZG9jdW1lbnQuY29va2llLmluZGV4T2YobmFtZSArIFwiPVwiKTtcclxuICAgIGlmIChzdGFydCAhPT0gLTEpIHtcclxuICAgICAgc3RhcnQgPSBzdGFydCArIG5hbWUubGVuZ3RoICsgMTtcclxuICAgICAgbGV0IGVuZCA9IGRvY3VtZW50LmNvb2tpZS5pbmRleE9mKFwiO1wiLCBzdGFydCk7XHJcbiAgICAgIGlmIChlbmQgPT09IC0xKSB7XHJcbiAgICAgICAgZW5kID0gZG9jdW1lbnQuY29va2llLmxlbmd0aDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdW5lc2NhcGUoZG9jdW1lbnQuY29va2llLnN1YnN0cmluZyhzdGFydCwgZW5kKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiAnJztcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBkZWxldGVDb29raWUgPSAobmFtZSkgPT4ge1xyXG4gIGRvY3VtZW50LmNvb2tpZSA9IGAke25hbWV9PSA7IGV4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVQ7YDtcclxufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/helpers.js\n");

/***/ }),

/***/ "./node_modules/bowser/es5.js":
/*!************************************!*\
  !*** ./node_modules/bowser/es5.js ***!
  \************************************/
/***/ (function(module) {

eval("!function(e,t){ true?module.exports=t():0}(this,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var n=r(18),i=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,n){void 0===n&&(n=!1);var i=e.getVersionPrecision(t),s=e.getVersionPrecision(r),a=Math.max(i,s),o=0,u=e.map([t,r],(function(t){var r=a-e.getVersionPrecision(t),n=t+new Array(r+1).join(\".0\");return e.map(n.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(n&&(o=a-Math.min(i,s)),a-=1;a>=o;){if(u[0][a]>u[1][a])return 1;if(u[0][a]===u[1][a]){if(a===o)return 0;a-=1}else if(u[0][a]<u[1][a])return-1}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var i=e[r];if(t(i,r))return i}},e.assign=function(e){for(var t,r,n=e,i=arguments.length,s=new Array(i>1?i-1:0),a=1;a<i;a++)s[a-1]=arguments[a];if(Object.assign)return Object.assign.apply(Object,[e].concat(s));var o=function(){var e=s[t];\"object\"==typeof e&&null!==e&&Object.keys(e).forEach((function(t){n[t]=e[t]}))};for(t=0,r=s.length;t<r;t+=1)o();return e},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||\"\"},e}();t.default=i,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Electron:\"electron\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",electron:\"Electron\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var n,i=(n=r(91))&&n.__esModule?n:{default:n},s=r(18);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var o=function(){function e(){}var t,r,n;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new i.default(e,t)},e.parse=function(e){return new i.default(e).getResult()},t=e,n=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&a(t.prototype,r),n&&a(t,n),e}();t.default=o,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var n=u(r(92)),i=u(r(93)),s=u(r(94)),a=u(r(95)),o=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=o.default.find(n.default,(function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=o.default.find(i.default,(function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=o.default.find(s.default,(function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find(a.default,(function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return o.default.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},n=0,i={},s=0;if(Object.keys(e).forEach((function(t){var a=e[t];\"string\"==typeof a?(i[t]=a,s+=1):\"object\"==typeof a&&(r[t]=a,n+=1)})),n>0){var a=Object.keys(r),u=o.default.find(a,(function(e){return t.isOS(e)}));if(u){var d=this.satisfies(r[u]);if(void 0!==d)return d}var c=o.default.find(a,(function(e){return t.isPlatform(e)}));if(c){var f=this.satisfies(r[c]);if(void 0!==f)return f}}if(s>0){var l=Object.keys(i),h=o.default.find(l,(function(e){return t.isBrowser(e,!0)}));if(void 0!==h)return this.compareVersion(i[h])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),i=o.default.getBrowserTypeByAlias(n);return t&&i&&(n=i.toLowerCase()),n===r},t.compareVersion=function(e){var t=[0],r=e,n=!1,i=this.getBrowserVersion();if(\"string\"==typeof i)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(n=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(n=!0,r=e.substr(1)),t.indexOf(o.default.compareVersions(i,r,n))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e,t){return void 0===t&&(t=!1),this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,a=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=i.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=i.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=i.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=i.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=i.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opt\\/\\d+(?:.?_?\\d+)+/i],describe:function(e){var t={name:\"Opera Touch\"},r=i.default.getFirstMatch(/(?:opt)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=i.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=i.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=i.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=i.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=i.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=i.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=i.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=i.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=i.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=i.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=i.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=i.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=i.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=i.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/electron/i],describe:function(e){var t={name:\"Electron\"},r=i.default.getFirstMatch(/(?:electron)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MiuiBrowser/i],describe:function(e){var t={name:\"Miui\"},r=i.default.getFirstMatch(/(?:MiuiBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=i.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=i.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=i.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:i.default.getFirstMatch(t,e),version:i.default.getSecondMatch(t,e)}}}];t.default=a,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/Roku\\/DVP/],describe:function(e){var t=i.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=i.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows /i],describe:function(e){var t=i.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=i.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/Macintosh(.*?) FxiOS(.*?)\\//],describe:function(e){var t={name:s.OS_MAP.iOS},r=i.default.getSecondMatch(/(Version\\/)(\\d[\\d.]+)/,e);return r&&(t.version=r),t}},{test:[/macintosh/i],describe:function(e){var t=i.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=i.default.getMacOSVersionName(t),n={name:s.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=i.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=i.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=i.default.getAndroidVersionName(t),n={name:s.OS_MAP.Android,version:t};return r&&(n.versionName=r),n}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=i.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=i.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||i.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||i.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=i.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=i.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=i.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=a,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=i.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\\//],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=i.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=a,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var a=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=i.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=i.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=i.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=i.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=i.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=a,e.exports=t.default}})}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/bowser/es5.js\n");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function eventListener() {\n      if (errorListener !== undefined) {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n    var errorListener;\n\n    // Adding an error listener is not optional because\n    // if an error is thrown on an event emitter we cannot\n    // guarantee that the actual event we are waiting will\n    // be fired. The result could be a silent way to create\n    // memory or file descriptor leaks, which is something\n    // we should avoid.\n    if (name !== 'error') {\n      errorListener = function errorListener(err) {\n        emitter.removeListener(name, eventListener);\n        reject(err);\n      };\n\n      emitter.once('error', errorListener);\n    }\n\n    emitter.once(name, eventListener);\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/events/events.js\n");

/***/ }),

/***/ "./node_modules/howler/dist/howler.js":
/*!********************************************!*\
  !*** ./node_modules/howler/dist/howler.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (true) {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof __webpack_require__.g !== 'undefined') {\n    __webpack_require__.g.HowlerGlobal = HowlerGlobal;\n    __webpack_require__.g.Howler = Howler;\n    __webpack_require__.g.Howl = Howl;\n    __webpack_require__.g.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/howler/dist/howler.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Observable.js":
/*!********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Observable.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Observable\": () => /* binding */ Observable\n/* harmony export */ });\n/* harmony import */ var _util_canReportError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/canReportError */ \"./node_modules/rxjs/_esm5/internal/util/canReportError.js\");\n/* harmony import */ var _util_toSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/toSubscriber */ \"./node_modules/rxjs/_esm5/internal/util/toSubscriber.js\");\n/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./symbol/observable */ \"./node_modules/rxjs/_esm5/internal/symbol/observable.js\");\n/* harmony import */ var _util_pipe__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/pipe */ \"./node_modules/rxjs/_esm5/internal/util/pipe.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"./node_modules/rxjs/_esm5/internal/config.js\");\n/** PURE_IMPORTS_START _util_canReportError,_util_toSubscriber,_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */\n\n\n\n\n\nvar Observable = /*@__PURE__*/ (function () {\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = (0,_util_toSubscriber__WEBPACK_IMPORTED_MODULE_0__.toSubscriber)(observerOrNext, error, complete);\n        if (operator) {\n            sink.add(operator.call(sink, this.source));\n        }\n        else {\n            sink.add(this.source || (_config__WEBPACK_IMPORTED_MODULE_1__.config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n                this._subscribe(sink) :\n                this._trySubscribe(sink));\n        }\n        if (_config__WEBPACK_IMPORTED_MODULE_1__.config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (_config__WEBPACK_IMPORTED_MODULE_1__.config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            if ((0,_util_canReportError__WEBPACK_IMPORTED_MODULE_2__.canReportError)(sink)) {\n                sink.error(err);\n            }\n            else {\n                console.warn(err);\n            }\n        }\n    };\n    Observable.prototype.forEach = function (next, promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        return source && source.subscribe(subscriber);\n    };\n    Observable.prototype[_symbol_observable__WEBPACK_IMPORTED_MODULE_3__.observable] = function () {\n        return this;\n    };\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return (0,_util_pipe__WEBPACK_IMPORTED_MODULE_4__.pipeFromArray)(operations)(this);\n    };\n    Observable.prototype.toPromise = function (promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\n\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = _config__WEBPACK_IMPORTED_MODULE_1__.config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL09ic2VydmFibGUuanM/ZTliOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUN1RDtBQUNKO0FBQ21CO0FBQzFCO0FBQ1Y7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGdFQUFZO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGlGQUE0QztBQUNqRjtBQUNBO0FBQ0E7QUFDQSxZQUFZLGlGQUE0QztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlGQUE0QztBQUM1RDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isb0VBQWM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsMERBQWlCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx5REFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsa0JBQWtCLEVBQUUsa0JBQWtCLG9CQUFvQixFQUFFLGVBQWUsdUJBQXVCLEVBQUU7QUFDOUksU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ3FCO0FBQ3RCO0FBQ0E7QUFDQSxzQkFBc0IsbURBQWM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9PYnNlcnZhYmxlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfdXRpbF9jYW5SZXBvcnRFcnJvcixfdXRpbF90b1N1YnNjcmliZXIsX3N5bWJvbF9vYnNlcnZhYmxlLF91dGlsX3BpcGUsX2NvbmZpZyBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBjYW5SZXBvcnRFcnJvciB9IGZyb20gJy4vdXRpbC9jYW5SZXBvcnRFcnJvcic7XG5pbXBvcnQgeyB0b1N1YnNjcmliZXIgfSBmcm9tICcuL3V0aWwvdG9TdWJzY3JpYmVyJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IHBpcGVGcm9tQXJyYXkgfSBmcm9tICcuL3V0aWwvcGlwZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG52YXIgT2JzZXJ2YWJsZSA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZSkge1xuICAgICAgICB0aGlzLl9pc1NjYWxhciA9IGZhbHNlO1xuICAgICAgICBpZiAoc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBvcGVyYXRvciA9IHRoaXMub3BlcmF0b3I7XG4gICAgICAgIHZhciBzaW5rID0gdG9TdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBpZiAob3BlcmF0b3IpIHtcbiAgICAgICAgICAgIHNpbmsuYWRkKG9wZXJhdG9yLmNhbGwoc2luaywgdGhpcy5zb3VyY2UpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNpbmsuYWRkKHRoaXMuc291cmNlIHx8IChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyAmJiAhc2luay5zeW5jRXJyb3JUaHJvd2FibGUpID9cbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUoc2luaykgOlxuICAgICAgICAgICAgICAgIHRoaXMuX3RyeVN1YnNjcmliZShzaW5rKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICBpZiAoc2luay5zeW5jRXJyb3JUaHJvd2FibGUpIHtcbiAgICAgICAgICAgICAgICBzaW5rLnN5bmNFcnJvclRocm93YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChzaW5rLnN5bmNFcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBzaW5rLnN5bmNFcnJvclZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2luaztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc2luaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgICAgICAgICBzaW5rLnN5bmNFcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2luay5zeW5jRXJyb3JWYWx1ZSA9IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjYW5SZXBvcnRFcnJvcihzaW5rKSkge1xuICAgICAgICAgICAgICAgIHNpbmsuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKG5leHQsIHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVqZWN0LCByZXNvbHZlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgICByZXR1cm4gc291cmNlICYmIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZVtTeW1ib2xfb2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3BlcmF0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwaXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoeCkgeyByZXR1cm4gdmFsdWUgPSB4OyB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiByZWplY3QoZXJyKTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUuY3JlYXRlID0gZnVuY3Rpb24gKHN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoc3Vic2NyaWJlKTtcbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XG4gICAgaWYgKCFwcm9taXNlQ3Rvcikge1xuICAgICAgICBwcm9taXNlQ3RvciA9IGNvbmZpZy5Qcm9taXNlIHx8IFByb21pc2U7XG4gICAgfVxuICAgIGlmICghcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyBQcm9taXNlIGltcGwgZm91bmQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2VDdG9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2YWJsZS5qcy5tYXBcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/Observable.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Observer.js":
/*!******************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Observer.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"empty\": () => /* binding */ empty\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"./node_modules/rxjs/_esm5/internal/config.js\");\n/* harmony import */ var _util_hostReportError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/hostReportError */ \"./node_modules/rxjs/_esm5/internal/util/hostReportError.js\");\n/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */\n\n\nvar empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) {\n        if (_config__WEBPACK_IMPORTED_MODULE_0__.config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_1__.hostReportError)(err);\n        }\n    },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL09ic2VydmVyLmpzP2U5YTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDa0M7QUFDdUI7QUFDbEQ7QUFDUDtBQUNBLDRCQUE0QixFQUFFO0FBQzlCO0FBQ0EsWUFBWSxpRkFBNEM7QUFDeEQ7QUFDQTtBQUNBO0FBQ0EsWUFBWSxzRUFBZTtBQUMzQjtBQUNBLEtBQUs7QUFDTCwyQkFBMkI7QUFDM0I7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL09ic2VydmVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfY29uZmlnLF91dGlsX2hvc3RSZXBvcnRFcnJvciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBob3N0UmVwb3J0RXJyb3IgfSBmcm9tICcuL3V0aWwvaG9zdFJlcG9ydEVycm9yJztcbmV4cG9ydCB2YXIgZW1wdHkgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyB9LFxuICAgIGVycm9yOiBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaG9zdFJlcG9ydEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7IH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZlci5qcy5tYXBcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/Observer.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Subject.js":
/*!*****************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Subject.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SubjectSubscriber\": () => /* binding */ SubjectSubscriber,\n/* harmony export */   \"Subject\": () => /* binding */ Subject,\n/* harmony export */   \"AnonymousSubject\": () => /* binding */ AnonymousSubject\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Observable */ \"./node_modules/rxjs/_esm5/internal/Observable.js\");\n/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Subscriber */ \"./node_modules/rxjs/_esm5/internal/Subscriber.js\");\n/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Subscription */ \"./node_modules/rxjs/_esm5/internal/Subscription.js\");\n/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ \"./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js\");\n/* harmony import */ var _SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SubjectSubscription */ \"./node_modules/rxjs/_esm5/internal/SubjectSubscription.js\");\n/* harmony import */ var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/symbol/rxSubscriber */ \"./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js\");\n/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */\n\n\n\n\n\n\n\nvar SubjectSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib__WEBPACK_IMPORTED_MODULE_0__.__extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        return _this;\n    }\n    return SubjectSubscriber;\n}(_Subscriber__WEBPACK_IMPORTED_MODULE_1__.Subscriber));\n\nvar Subject = /*@__PURE__*/ (function (_super) {\n    tslib__WEBPACK_IMPORTED_MODULE_0__.__extends(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.observers = [];\n        _this.closed = false;\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype[_internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_2__.rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__.ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return _Subscription__WEBPACK_IMPORTED_MODULE_4__.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return _Subscription__WEBPACK_IMPORTED_MODULE_4__.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new _SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new _Observable__WEBPACK_IMPORTED_MODULE_6__.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(_Observable__WEBPACK_IMPORTED_MODULE_6__.Observable));\n\nvar AnonymousSubject = /*@__PURE__*/ (function (_super) {\n    tslib__WEBPACK_IMPORTED_MODULE_0__.__extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return _Subscription__WEBPACK_IMPORTED_MODULE_4__.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\n\n//# sourceMappingURL=Subject.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/Subject.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/SubjectSubscription.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/SubjectSubscription.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SubjectSubscription\": () => /* binding */ SubjectSubscription\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Subscription */ \"./node_modules/rxjs/_esm5/internal/Subscription.js\");\n/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\n\n\nvar SubjectSubscription = /*@__PURE__*/ (function (_super) {\n    tslib__WEBPACK_IMPORTED_MODULE_0__.__extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        var _this = _super.call(this) || this;\n        _this.subject = subject;\n        _this.subscriber = subscriber;\n        _this.closed = false;\n        return _this;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(_Subscription__WEBPACK_IMPORTED_MODULE_1__.Subscription));\n\n//# sourceMappingURL=SubjectSubscription.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL1N1YmplY3RTdWJzY3JpcHRpb24uanM/YjhjNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNpQztBQUNhO0FBQzlDO0FBQ0EsSUFBSSw0Q0FBaUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxDQUFDLHVEQUFZO0FBQ2lCO0FBQy9CIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvU3ViamVjdFN1YnNjcmlwdGlvbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgdHNsaWIsX1N1YnNjcmlwdGlvbiBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xudmFyIFN1YmplY3RTdWJzY3JpcHRpb24gPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoU3ViamVjdFN1YnNjcmlwdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0U3Vic2NyaXB0aW9uKHN1YmplY3QsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gICAgICAgIF90aGlzLnN1YnNjcmliZXIgPSBzdWJzY3JpYmVyO1xuICAgICAgICBfdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJqZWN0U3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICB2YXIgc3ViamVjdCA9IHRoaXMuc3ViamVjdDtcbiAgICAgICAgdmFyIG9ic2VydmVycyA9IHN1YmplY3Qub2JzZXJ2ZXJzO1xuICAgICAgICB0aGlzLnN1YmplY3QgPSBudWxsO1xuICAgICAgICBpZiAoIW9ic2VydmVycyB8fCBvYnNlcnZlcnMubGVuZ3RoID09PSAwIHx8IHN1YmplY3QuaXNTdG9wcGVkIHx8IHN1YmplY3QuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YnNjcmliZXJJbmRleCA9IG9ic2VydmVycy5pbmRleE9mKHRoaXMuc3Vic2NyaWJlcik7XG4gICAgICAgIGlmIChzdWJzY3JpYmVySW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBvYnNlcnZlcnMuc3BsaWNlKHN1YnNjcmliZXJJbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTdWJqZWN0U3Vic2NyaXB0aW9uO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IFN1YmplY3RTdWJzY3JpcHRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3RTdWJzY3JpcHRpb24uanMubWFwXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/SubjectSubscription.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Subscriber.js":
/*!********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Subscriber.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Subscriber\": () => /* binding */ Subscriber,\n/* harmony export */   \"SafeSubscriber\": () => /* binding */ SafeSubscriber\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\n/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/isFunction */ \"./node_modules/rxjs/_esm5/internal/util/isFunction.js\");\n/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Observer */ \"./node_modules/rxjs/_esm5/internal/Observer.js\");\n/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Subscription */ \"./node_modules/rxjs/_esm5/internal/Subscription.js\");\n/* harmony import */ var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/symbol/rxSubscriber */ \"./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config */ \"./node_modules/rxjs/_esm5/internal/config.js\");\n/* harmony import */ var _util_hostReportError__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util/hostReportError */ \"./node_modules/rxjs/_esm5/internal/util/hostReportError.js\");\n/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */\n\n\n\n\n\n\n\nvar Subscriber = /*@__PURE__*/ (function (_super) {\n    tslib__WEBPACK_IMPORTED_MODULE_0__.__extends(Subscriber, _super);\n    function Subscriber(destinationOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this.syncErrorValue = null;\n        _this.syncErrorThrown = false;\n        _this.syncErrorThrowable = false;\n        _this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                _this.destination = _Observer__WEBPACK_IMPORTED_MODULE_1__.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    _this.destination = _Observer__WEBPACK_IMPORTED_MODULE_1__.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        _this.destination = destinationOrNext;\n                        destinationOrNext.add(_this);\n                    }\n                    else {\n                        _this.syncErrorThrowable = true;\n                        _this.destination = new SafeSubscriber(_this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                _this.syncErrorThrowable = true;\n                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n                break;\n        }\n        return _this;\n    }\n    Subscriber.prototype[_internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_2__.rxSubscriber] = function () { return this; };\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _parentOrParents = this._parentOrParents;\n        this._parentOrParents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parentOrParents = _parentOrParents;\n        return this;\n    };\n    return Subscriber;\n}(_Subscription__WEBPACK_IMPORTED_MODULE_3__.Subscription));\n\nvar SafeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib__WEBPACK_IMPORTED_MODULE_0__.__extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = _this;\n        if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_4__.isFunction)(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== _Observer__WEBPACK_IMPORTED_MODULE_1__.empty) {\n                context = Object.create(observerOrNext);\n                if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_4__.isFunction)(context.unsubscribe)) {\n                    _this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = _this.unsubscribe.bind(_this);\n            }\n        }\n        _this._context = context;\n        _this._next = next;\n        _this._error = error;\n        _this._complete = complete;\n        return _this;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_config__WEBPACK_IMPORTED_MODULE_5__.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            var useDeprecatedSynchronousErrorHandling = _config__WEBPACK_IMPORTED_MODULE_5__.config.useDeprecatedSynchronousErrorHandling;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_6__.hostReportError)(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_6__.hostReportError)(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_config__WEBPACK_IMPORTED_MODULE_5__.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (_config__WEBPACK_IMPORTED_MODULE_5__.config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_6__.hostReportError)(err);\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        if (!_config__WEBPACK_IMPORTED_MODULE_5__.config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (_config__WEBPACK_IMPORTED_MODULE_5__.config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                (0,_util_hostReportError__WEBPACK_IMPORTED_MODULE_6__.hostReportError)(err);\n                return true;\n            }\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\n\n//# sourceMappingURL=Subscriber.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/Subscriber.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/Subscription.js":
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/Subscription.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Subscription\": () => /* binding */ Subscription\n/* harmony export */ });\n/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/isArray */ \"./node_modules/rxjs/_esm5/internal/util/isArray.js\");\n/* harmony import */ var _util_isObject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/isObject */ \"./node_modules/rxjs/_esm5/internal/util/isObject.js\");\n/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/isFunction */ \"./node_modules/rxjs/_esm5/internal/util/isFunction.js\");\n/* harmony import */ var _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/UnsubscriptionError */ \"./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js\");\n/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_UnsubscriptionError PURE_IMPORTS_END */\n\n\n\n\nvar Subscription = /*@__PURE__*/ (function () {\n    function Subscription(unsubscribe) {\n        this.closed = false;\n        this._parentOrParents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._ctorUnsubscribe = true;\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    Subscription.prototype.unsubscribe = function () {\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parentOrParents = _a._parentOrParents, _ctorUnsubscribe = _a._ctorUnsubscribe, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parentOrParents = null;\n        this._subscriptions = null;\n        if (_parentOrParents instanceof Subscription) {\n            _parentOrParents.remove(this);\n        }\n        else if (_parentOrParents !== null) {\n            for (var index = 0; index < _parentOrParents.length; ++index) {\n                var parent_1 = _parentOrParents[index];\n                parent_1.remove(this);\n            }\n        }\n        if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__.isFunction)(_unsubscribe)) {\n            if (_ctorUnsubscribe) {\n                this._unsubscribe = undefined;\n            }\n            try {\n                _unsubscribe.call(this);\n            }\n            catch (e) {\n                errors = e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__.UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n            }\n        }\n        if ((0,_util_isArray__WEBPACK_IMPORTED_MODULE_2__.isArray)(_subscriptions)) {\n            var index = -1;\n            var len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if ((0,_util_isObject__WEBPACK_IMPORTED_MODULE_3__.isObject)(sub)) {\n                    try {\n                        sub.unsubscribe();\n                    }\n                    catch (e) {\n                        errors = errors || [];\n                        if (e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n                        }\n                        else {\n                            errors.push(e);\n                        }\n                    }\n                }\n            }\n        }\n        if (errors) {\n            throw new _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__.UnsubscriptionError(errors);\n        }\n    };\n    Subscription.prototype.add = function (teardown) {\n        var subscription = teardown;\n        if (!teardown) {\n            return Subscription.EMPTY;\n        }\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (!(subscription instanceof Subscription)) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default: {\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n            }\n        }\n        var _parentOrParents = subscription._parentOrParents;\n        if (_parentOrParents === null) {\n            subscription._parentOrParents = this;\n        }\n        else if (_parentOrParents instanceof Subscription) {\n            if (_parentOrParents === this) {\n                return subscription;\n            }\n            subscription._parentOrParents = [_parentOrParents, this];\n        }\n        else if (_parentOrParents.indexOf(this) === -1) {\n            _parentOrParents.push(this);\n        }\n        else {\n            return subscription;\n        }\n        var subscriptions = this._subscriptions;\n        if (subscriptions === null) {\n            this._subscriptions = [subscription];\n        }\n        else {\n            subscriptions.push(subscription);\n        }\n        return subscription;\n    };\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\n\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_1__.UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/Subscription.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/config.js":
/*!****************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/config.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"config\": () => /* binding */ config\n/* harmony export */ });\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar _enable_super_gross_mode_that_will_cause_bad_things = false;\nvar config = {\n    Promise: undefined,\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            var error = /*@__PURE__*/ new Error();\n            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL2NvbmZpZy5qcz84OGJjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC9jb25maWcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG52YXIgX2VuYWJsZV9zdXBlcl9ncm9zc19tb2RlX3RoYXRfd2lsbF9jYXVzZV9iYWRfdGhpbmdzID0gZmFsc2U7XG5leHBvcnQgdmFyIGNvbmZpZyA9IHtcbiAgICBQcm9taXNlOiB1bmRlZmluZWQsXG4gICAgc2V0IHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSAvKkBfX1BVUkVfXyovIG5ldyBFcnJvcigpO1xuICAgICAgICAgICAgLypAX19QVVJFX18qLyBjb25zb2xlLndhcm4oJ0RFUFJFQ0FURUQhIFJ4SlMgd2FzIHNldCB0byB1c2UgZGVwcmVjYXRlZCBzeW5jaHJvbm91cyBlcnJvciBoYW5kbGluZyBiZWhhdmlvciBieSBjb2RlIGF0OiBcXG4nICsgZXJyb3Iuc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKF9lbmFibGVfc3VwZXJfZ3Jvc3NfbW9kZV90aGF0X3dpbGxfY2F1c2VfYmFkX3RoaW5ncykge1xuICAgICAgICAgICAgLypAX19QVVJFX18qLyBjb25zb2xlLmxvZygnUnhKUzogQmFjayB0byBhIGJldHRlciBlcnJvciBiZWhhdmlvci4gVGhhbmsgeW91LiA8MycpO1xuICAgICAgICB9XG4gICAgICAgIF9lbmFibGVfc3VwZXJfZ3Jvc3NfbW9kZV90aGF0X3dpbGxfY2F1c2VfYmFkX3RoaW5ncyA9IHZhbHVlO1xuICAgIH0sXG4gICAgZ2V0IHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcoKSB7XG4gICAgICAgIHJldHVybiBfZW5hYmxlX3N1cGVyX2dyb3NzX21vZGVfdGhhdF93aWxsX2NhdXNlX2JhZF90aGluZ3M7XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/config.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/symbol/observable.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/symbol/observable.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"observable\": () => /* binding */ observable\n/* harmony export */ });\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar observable = /*@__PURE__*/ (function () { return typeof Symbol === 'function' && Symbol.observable || '@@observable'; })();\n//# sourceMappingURL=observable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3N5bWJvbC9vYnNlcnZhYmxlLmpzP2M1MzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ08sNkNBQTZDLDRFQUE0RSxFQUFFO0FBQ2xJIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvc3ltYm9sL29ic2VydmFibGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgdmFyIG9ic2VydmFibGUgPSAvKkBfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7IHJldHVybiB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlIHx8ICdAQG9ic2VydmFibGUnOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXBcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/symbol/observable.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rxSubscriber\": () => /* binding */ rxSubscriber,\n/* harmony export */   \"$$rxSubscriber\": () => /* binding */ $$rxSubscriber\n/* harmony export */ });\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar rxSubscriber = /*@__PURE__*/ (function () {\n    return typeof Symbol === 'function'\n        ? /*@__PURE__*/ Symbol('rxSubscriber')\n        : '@@rxSubscriber_' + /*@__PURE__*/ Math.random();\n})();\nvar $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3N5bWJvbC9yeFN1YnNjcmliZXIuanM/MmZmNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ007QUFDUCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3N5bWJvbC9yeFN1YnNjcmliZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgdmFyIHJ4U3Vic2NyaWJlciA9IC8qQF9fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IC8qQF9fUFVSRV9fKi8gU3ltYm9sKCdyeFN1YnNjcmliZXInKVxuICAgICAgICA6ICdAQHJ4U3Vic2NyaWJlcl8nICsgLypAX19QVVJFX18qLyBNYXRoLnJhbmRvbSgpO1xufSkoKTtcbmV4cG9ydCB2YXIgJCRyeFN1YnNjcmliZXIgPSByeFN1YnNjcmliZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yeFN1YnNjcmliZXIuanMubWFwXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js":
/*!**************************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ObjectUnsubscribedError\": () => /* binding */ ObjectUnsubscribedError\n/* harmony export */ });\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar ObjectUnsubscribedErrorImpl = /*@__PURE__*/ (function () {\n    function ObjectUnsubscribedErrorImpl() {\n        Error.call(this);\n        this.message = 'object unsubscribed';\n        this.name = 'ObjectUnsubscribedError';\n        return this;\n    }\n    ObjectUnsubscribedErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);\n    return ObjectUnsubscribedErrorImpl;\n})();\nvar ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanM/ZjIwZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ007QUFDUCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG52YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbCgpIHtcbiAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ29iamVjdCB1bnN1YnNjcmliZWQnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsLnByb3RvdHlwZSA9IC8qQF9fUFVSRV9fKi8gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIHJldHVybiBPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGw7XG59KSgpO1xuZXhwb3J0IHZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvciA9IE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzLm1hcFxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"UnsubscriptionError\": () => /* binding */ UnsubscriptionError\n/* harmony export */ });\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar UnsubscriptionErrorImpl = /*@__PURE__*/ (function () {\n    function UnsubscriptionErrorImpl(errors) {\n        Error.call(this);\n        this.message = errors ?\n            errors.length + \" errors occurred during unsubscription:\\n\" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ') : '';\n        this.name = 'UnsubscriptionError';\n        this.errors = errors;\n        return this;\n    }\n    UnsubscriptionErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);\n    return UnsubscriptionErrorImpl;\n})();\nvar UnsubscriptionError = UnsubscriptionErrorImpl;\n//# sourceMappingURL=UnsubscriptionError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qcz82YjBiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0dBQXdHLHNDQUFzQyxFQUFFO0FBQ2hKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDTTtBQUNQIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xudmFyIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsKGVycm9ycykge1xuICAgICAgICBFcnJvci5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcnMgP1xuICAgICAgICAgICAgZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuXCIgKyBlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnIsIGkpIHsgcmV0dXJuIGkgKyAxICsgXCIpIFwiICsgZXJyLnRvU3RyaW5nKCk7IH0pLmpvaW4oJ1xcbiAgJykgOiAnJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsLnByb3RvdHlwZSA9IC8qQF9fUFVSRV9fKi8gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIHJldHVybiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbDtcbn0pKCk7XG5leHBvcnQgdmFyIFVuc3Vic2NyaXB0aW9uRXJyb3IgPSBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuc3Vic2NyaXB0aW9uRXJyb3IuanMubWFwXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/canReportError.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/canReportError.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"canReportError\": () => /* binding */ canReportError\n/* harmony export */ });\n/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ \"./node_modules/rxjs/_esm5/internal/Subscriber.js\");\n/** PURE_IMPORTS_START _Subscriber PURE_IMPORTS_END */\n\nfunction canReportError(observer) {\n    while (observer) {\n        var _a = observer, closed_1 = _a.closed, destination = _a.destination, isStopped = _a.isStopped;\n        if (closed_1 || isStopped) {\n            return false;\n        }\n        else if (destination && destination instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber) {\n            observer = destination;\n        }\n        else {\n            observer = null;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=canReportError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvY2FuUmVwb3J0RXJyb3IuanM/ZDVmMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQzJDO0FBQ3BDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxtREFBVTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2NhblJlcG9ydEVycm9yLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfU3Vic2NyaWJlciBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gY2FuUmVwb3J0RXJyb3Iob2JzZXJ2ZXIpIHtcbiAgICB3aGlsZSAob2JzZXJ2ZXIpIHtcbiAgICAgICAgdmFyIF9hID0gb2JzZXJ2ZXIsIGNsb3NlZF8xID0gX2EuY2xvc2VkLCBkZXN0aW5hdGlvbiA9IF9hLmRlc3RpbmF0aW9uLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQ7XG4gICAgICAgIGlmIChjbG9zZWRfMSB8fCBpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZXN0aW5hdGlvbiAmJiBkZXN0aW5hdGlvbiBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIG9ic2VydmVyID0gZGVzdGluYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvYnNlcnZlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYW5SZXBvcnRFcnJvci5qcy5tYXBcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/util/canReportError.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/hostReportError.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/hostReportError.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"hostReportError\": () => /* binding */ hostReportError\n/* harmony export */ });\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction hostReportError(err) {\n    setTimeout(function () { throw err; }, 0);\n}\n//# sourceMappingURL=hostReportError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaG9zdFJlcG9ydEVycm9yLmpzPzBjYTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ087QUFDUCw0QkFBNEIsV0FBVyxFQUFFO0FBQ3pDO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL2hvc3RSZXBvcnRFcnJvci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBQVVJFX0lNUE9SVFNfU1RBUlQgIFBVUkVfSU1QT1JUU19FTkQgKi9cbmV4cG9ydCBmdW5jdGlvbiBob3N0UmVwb3J0RXJyb3IoZXJyKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfSwgMCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ob3N0UmVwb3J0RXJyb3IuanMubWFwXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/util/hostReportError.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/identity.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/identity.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"identity\": () => /* binding */ identity\n/* harmony export */ });\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaWRlbnRpdHkuanM/OTgyOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDTztBQUNQO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaWRlbnRpdHkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICAgIHJldHVybiB4O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWRlbnRpdHkuanMubWFwXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/util/identity.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isArray.js":
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isArray.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isArray\": () => /* binding */ isArray\n/* harmony export */ });\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar isArray = /*@__PURE__*/ (function () { return Array.isArray || (function (x) { return x && typeof x.length === 'number'; }); })();\n//# sourceMappingURL=isArray.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNBcnJheS5qcz84YWM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNPLDBDQUEwQyx3Q0FBd0MsMENBQTBDLEVBQUUsRUFBRSxFQUFFO0FBQ3pJIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FycmF5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IHZhciBpc0FycmF5ID0gLypAX19QVVJFX18qLyAoZnVuY3Rpb24gKCkgeyByZXR1cm4gQXJyYXkuaXNBcnJheSB8fCAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJzsgfSk7IH0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5LmpzLm1hcFxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/util/isArray.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isFunction.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isFunction.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isFunction\": () => /* binding */ isFunction\n/* harmony export */ });\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNGdW5jdGlvbi5qcz9kODE3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3J4anMvX2VzbTUvaW50ZXJuYWwvdXRpbC9pc0Z1bmN0aW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCAgUFVSRV9JTVBPUlRTX0VORCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRnVuY3Rpb24uanMubWFwXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/util/isFunction.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/isObject.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/isObject.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"isObject\": () => /* binding */ isObject\n/* harmony export */ });\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction isObject(x) {\n    return x !== null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNPYmplY3QuanM/MzFjNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDTztBQUNQO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvaXNPYmplY3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogUFVSRV9JTVBPUlRTX1NUQVJUICBQVVJFX0lNUE9SVFNfRU5EICovXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QoeCkge1xuICAgIHJldHVybiB4ICE9PSBudWxsICYmIHR5cGVvZiB4ID09PSAnb2JqZWN0Jztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzT2JqZWN0LmpzLm1hcFxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/util/isObject.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/pipe.js":
/*!*******************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/pipe.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"pipe\": () => /* binding */ pipe,\n/* harmony export */   \"pipeFromArray\": () => /* binding */ pipeFromArray\n/* harmony export */ });\n/* harmony import */ var _identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./identity */ \"./node_modules/rxjs/_esm5/internal/util/identity.js\");\n/** PURE_IMPORTS_START _identity PURE_IMPORTS_END */\n\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nfunction pipeFromArray(fns) {\n    if (fns.length === 0) {\n        return _identity__WEBPACK_IMPORTED_MODULE_0__.identity;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvcGlwZS5qcz9jYjcwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ3NDO0FBQy9CO0FBQ1A7QUFDQSxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGVBQWUsK0NBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxpQkFBaUIsRUFBRTtBQUNsRTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcnhqcy9fZXNtNS9pbnRlcm5hbC91dGlsL3BpcGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogUFVSRV9JTVBPUlRTX1NUQVJUIF9pZGVudGl0eSBQVVJFX0lNUE9SVFNfRU5EICovXG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGZuKSB7IHJldHVybiBmbihwcmV2KTsgfSwgaW5wdXQpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlLmpzLm1hcFxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/util/pipe.js\n");

/***/ }),

/***/ "./node_modules/rxjs/_esm5/internal/util/toSubscriber.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm5/internal/util/toSubscriber.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"toSubscriber\": () => /* binding */ toSubscriber\n/* harmony export */ });\n/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ \"./node_modules/rxjs/_esm5/internal/Subscriber.js\");\n/* harmony import */ var _symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../symbol/rxSubscriber */ \"./node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js\");\n/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Observer */ \"./node_modules/rxjs/_esm5/internal/Observer.js\");\n/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */\n\n\n\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__.rxSubscriber]) {\n            return nextOrObserver[_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber(_Observer__WEBPACK_IMPORTED_MODULE_2__.empty);\n    }\n    return new _Subscriber__WEBPACK_IMPORTED_MODULE_0__.Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9HZW9YcC8uL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvdG9TdWJzY3JpYmVyLmpzPzNkZTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQzJDO0FBQ2lDO0FBQ3ZCO0FBQzlDO0FBQ1A7QUFDQSxzQ0FBc0MsbURBQVU7QUFDaEQ7QUFDQTtBQUNBLDJCQUEyQiw4REFBa0I7QUFDN0Msa0NBQWtDLDhEQUFrQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsbURBQVUsQ0FBQyw0Q0FBYTtBQUMzQztBQUNBLGVBQWUsbURBQVU7QUFDekI7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yeGpzL19lc201L2ludGVybmFsL3V0aWwvdG9TdWJzY3JpYmVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIFBVUkVfSU1QT1JUU19TVEFSVCBfU3Vic2NyaWJlcixfc3ltYm9sX3J4U3Vic2NyaWJlcixfT2JzZXJ2ZXIgUFVSRV9JTVBPUlRTX0VORCAqL1xuaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgcnhTdWJzY3JpYmVyIGFzIHJ4U3Vic2NyaWJlclN5bWJvbCB9IGZyb20gJy4uL3N5bWJvbC9yeFN1YnNjcmliZXInO1xuaW1wb3J0IHsgZW1wdHkgYXMgZW1wdHlPYnNlcnZlciB9IGZyb20gJy4uL09ic2VydmVyJztcbmV4cG9ydCBmdW5jdGlvbiB0b1N1YnNjcmliZXIobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgIGlmIChuZXh0T3JPYnNlcnZlcikge1xuICAgICAgICBpZiAobmV4dE9yT2JzZXJ2ZXIgaW5zdGFuY2VvZiBTdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dE9yT2JzZXJ2ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyW3J4U3Vic2NyaWJlclN5bWJvbF0pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0T3JPYnNlcnZlcltyeFN1YnNjcmliZXJTeW1ib2xdKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFuZXh0T3JPYnNlcnZlciAmJiAhZXJyb3IgJiYgIWNvbXBsZXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU3Vic2NyaWJlcihlbXB0eU9ic2VydmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpYmVyKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9TdWJzY3JpYmVyLmpzLm1hcFxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/rxjs/_esm5/internal/util/toSubscriber.js\n");

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__extends\": () => /* binding */ __extends,\n/* harmony export */   \"__assign\": () => /* binding */ __assign,\n/* harmony export */   \"__rest\": () => /* binding */ __rest,\n/* harmony export */   \"__decorate\": () => /* binding */ __decorate,\n/* harmony export */   \"__param\": () => /* binding */ __param,\n/* harmony export */   \"__metadata\": () => /* binding */ __metadata,\n/* harmony export */   \"__awaiter\": () => /* binding */ __awaiter,\n/* harmony export */   \"__generator\": () => /* binding */ __generator,\n/* harmony export */   \"__createBinding\": () => /* binding */ __createBinding,\n/* harmony export */   \"__exportStar\": () => /* binding */ __exportStar,\n/* harmony export */   \"__values\": () => /* binding */ __values,\n/* harmony export */   \"__read\": () => /* binding */ __read,\n/* harmony export */   \"__spread\": () => /* binding */ __spread,\n/* harmony export */   \"__spreadArrays\": () => /* binding */ __spreadArrays,\n/* harmony export */   \"__await\": () => /* binding */ __await,\n/* harmony export */   \"__asyncGenerator\": () => /* binding */ __asyncGenerator,\n/* harmony export */   \"__asyncDelegator\": () => /* binding */ __asyncDelegator,\n/* harmony export */   \"__asyncValues\": () => /* binding */ __asyncValues,\n/* harmony export */   \"__makeTemplateObject\": () => /* binding */ __makeTemplateObject,\n/* harmony export */   \"__importStar\": () => /* binding */ __importStar,\n/* harmony export */   \"__importDefault\": () => /* binding */ __importDefault,\n/* harmony export */   \"__classPrivateFieldGet\": () => /* binding */ __classPrivateFieldGet,\n/* harmony export */   \"__classPrivateFieldSet\": () => /* binding */ __classPrivateFieldSet\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nfunction __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nfunction __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nfunction __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nfunction __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nfunction __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nfunction __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nfunction __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nfunction __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nfunction __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nfunction __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tslib/tslib.es6.js\n");

/***/ }),

/***/ "./src/audio/silence.mp3":
/*!*******************************!*\
  !*** ./src/audio/silence.mp3 ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"data:audio/mpeg;base64,SUQzBAAAAAAAU1RYWFgAAAANAAADVFJBQ0tUT1RBTAAAVElUMgAAAA8AAANHZW9YcCBTaWxlbmNlAFRTU0UAAAAPAAADTGF2ZjU3LjgzLjEwMAAAAAAAAAAAAAAA//tQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAAoAAAREAASEhgYHh4eJCQqKiowMDY2Njw8Q0NDSUlPT09VVVtbW2FhZ2dnbW1zc3N5eYCAgIaGjIyMkpKYmJienqSkpKqqsLCwtra8vLzDw8nJyc/P1dXV29vh4eHn5+3t7fPz+fn5//8AAAAATGF2YzU3LjEwAAAAAAAAAAAAAAAAJARRAAAAAAAAERD//v0TAAAAAAAAAAAAAAAAAAAAAP/7EGQAD/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABExBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sQZCIP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+xBkRA/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EGRmD/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sQZIgP8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+xBkqg/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EGTMD/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//sQZN2P8AAAaQAAAAgAAA0gAAABAAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+xBk3Y/wAABpAAAACAAADSAAAAEAAAGkAAAAIAAANIAAAARVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7EGTdj/AAAGkAAAAIAAANIAAAAQAAAaQAAAAgAAA0gAAABFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/audio/silence.mp3\n");

/***/ }),

/***/ "./src/audio/test.mp3":
/*!****************************!*\
  !*** ./src/audio/test.mp3 ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"data:audio/mpeg;base64,\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/audio/test.mp3\n");

/***/ }),

/***/ "./src/audio/visited.mp3":
/*!*******************************!*\
  !*** ./src/audio/visited.mp3 ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"data:audio/mpeg;base64,\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/audio/visited.mp3\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__("./src/index.js");
/******/ })()
.default;
});